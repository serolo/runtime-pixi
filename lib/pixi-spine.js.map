{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/index","src/SpineRuntime/Animation.js","src/SpineRuntime/AnimationState.js","src/SpineRuntime/AnimationStateData.js","src/SpineRuntime/Atlas.js","src/SpineRuntime/AtlasAttachmentParser.js","src/SpineRuntime/AtlasPage.js","src/SpineRuntime/AtlasReader.js","src/SpineRuntime/AtlasRegion.js","src/SpineRuntime/AttachmentTimeline.js","src/SpineRuntime/AttachmentType.js","src/SpineRuntime/Bone.js","src/SpineRuntime/BoneData.js","src/SpineRuntime/BoundingBoxAttachment.js","src/SpineRuntime/ColorTimeline.js","src/SpineRuntime/Curves.js","src/SpineRuntime/DrawOrderTimeline.js","src/SpineRuntime/Event.js","src/SpineRuntime/EventData.js","src/SpineRuntime/EventTimeline.js","src/SpineRuntime/FfdTimeline.js","src/SpineRuntime/FlipXTimeline.js","src/SpineRuntime/FlipYTimeline.js","src/SpineRuntime/IkConstraint.js","src/SpineRuntime/IkConstraintData.js","src/SpineRuntime/IkConstraintTimeline.js","src/SpineRuntime/MeshAttachment.js","src/SpineRuntime/RegionAttachment.js","src/SpineRuntime/RotateTimeline.js","src/SpineRuntime/ScaleTimeline.js","src/SpineRuntime/Skeleton.js","src/SpineRuntime/SkeletonBounds.js","src/SpineRuntime/SkeletonData.js","src/SpineRuntime/SkeletonJsonParser.js","src/SpineRuntime/Skin.js","src/SpineRuntime/SkinnedMeshAttachment.js","src/SpineRuntime/Slot.js","src/SpineRuntime/SlotData.js","src/SpineRuntime/TrackEntry.js","src/SpineRuntime/TranslateTimeline.js","src/SpineRuntime/index.js","src/SpineUtil/index.js","src/Spine/index.js","src/loaders/Loader.js","src/loaders/atlasParser.js","src/loaders/index.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtjjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvvrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjlvplBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA","file":"pixi-spine.js","sourceRoot":"./","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * @namespace PIXI.spine\n */\nmodule.exports = PIXI.spine = {\n    Spine:          require('./Spine'),\n    SpineRuntime:   require('./SpineRuntime'),\n    loaders:        require('./loaders')\n};\n","var spine = require('../SpineUtil');\nspine.Animation = function (name, timelines, duration)\n{\n    this.name = name;\n    this.timelines = timelines;\n    this.duration = duration;\n};\nspine.Animation.prototype = {\n    apply: function (skeleton, lastTime, time, loop, events)\n    {\n        if (loop && this.duration != 0)\n        {\n            time %= this.duration;\n            lastTime %= this.duration;\n        }\n        var timelines = this.timelines;\n        for (var i = 0, n = timelines.length; i < n; i++)\n            timelines[i].apply(skeleton, lastTime, time, events, 1);\n    },\n    mix: function (skeleton, lastTime, time, loop, events, alpha)\n    {\n        if (loop && this.duration != 0)\n        {\n            time %= this.duration;\n            lastTime %= this.duration;\n        }\n        var timelines = this.timelines;\n        for (var i = 0, n = timelines.length; i < n; i++)\n            timelines[i].apply(skeleton, lastTime, time, events, alpha);\n    }\n};\nspine.Animation.binarySearch = function (values, target, step)\n{\n    var low = 0;\n    var high = Math.floor(values.length / step) - 2;\n    if (!high) return step;\n    var current = high >>> 1;\n    while (true)\n    {\n        if (values[(current + 1) * step] <= target)\n            low = current + 1;\n        else\n            high = current;\n        if (low == high) return (low + 1) * step;\n        current = (low + high) >>> 1;\n    }\n};\nspine.Animation.binarySearch1 = function (values, target)\n{\n    var low = 0;\n    var high = values.length - 2;\n    if (!high) return 1;\n    var current = high >>> 1;\n    while (true)\n    {\n        if (values[current + 1] <= target)\n            low = current + 1;\n        else\n            high = current;\n        if (low == high) return low + 1;\n        current = (low + high) >>> 1;\n    }\n};\nspine.Animation.linearSearch = function (values, target, step)\n{\n    for (var i = 0, last = values.length - step; i <= last; i += step)\n        if (values[i] > target) return i;\n    return -1;\n};\nmodule.exports = spine.Animation;\n","var spine = require('../SpineUtil');\nspine.TrackEntry = require('./TrackEntry');\nspine.AnimationState = function (stateData)\n{\n    this.data = stateData;\n    this.tracks = [];\n    this.events = [];\n};\nspine.AnimationState.prototype = {\n    onStart: null,\n    onEnd: null,\n    onComplete: null,\n    onEvent: null,\n    timeScale: 1,\n    update: function (delta)\n    {\n        delta *= this.timeScale;\n        for (var i = 0; i < this.tracks.length; i++)\n        {\n            var current = this.tracks[i];\n            if (!current) continue;\n\n            current.time += delta * current.timeScale;\n            if (current.previous)\n            {\n                var previousDelta = delta * current.previous.timeScale;\n                current.previous.time += previousDelta;\n                current.mixTime += previousDelta;\n            }\n\n            var next = current.next;\n            if (next)\n            {\n                next.time = current.lastTime - next.delay;\n                if (next.time >= 0) this.setCurrent(i, next);\n            } else {\n                // End non-looping animation when it reaches its end time and there is no next entry.\n                if (!current.loop && current.lastTime >= current.endTime) this.clearTrack(i);\n            }\n        }\n    },\n    apply: function (skeleton)\n    {\n        skeleton.resetDrawOrder();\n\n        for (var i = 0; i < this.tracks.length; i++)\n        {\n            var current = this.tracks[i];\n            if (!current) continue;\n\n            this.events.length = 0;\n\n            var time = current.time;\n            var lastTime = current.lastTime;\n            var endTime = current.endTime;\n            var loop = current.loop;\n            if (!loop && time > endTime) time = endTime;\n\n            var previous = current.previous;\n            if (!previous)\n            {\n                if (current.mix == 1)\n                    current.animation.apply(skeleton, current.lastTime, time, loop, this.events);\n                else\n                    current.animation.mix(skeleton, current.lastTime, time, loop, this.events, current.mix);\n            } else {\n                var previousTime = previous.time;\n                if (!previous.loop && previousTime > previous.endTime) previousTime = previous.endTime;\n                previous.animation.apply(skeleton, previousTime, previousTime, previous.loop, null);\n\n                var alpha = current.mixTime / current.mixDuration * current.mix;\n                if (alpha >= 1)\n                {\n                    alpha = 1;\n                    current.previous = null;\n                }\n                current.animation.mix(skeleton, current.lastTime, time, loop, this.events, alpha);\n            }\n\n            for (var ii = 0, nn = this.events.length; ii < nn; ii++)\n            {\n                var event = this.events[ii];\n                if (current.onEvent) current.onEvent(i, event);\n                if (this.onEvent) this.onEvent(i, event);\n            }\n\n            // Check if completed the animation or a loop iteration.\n            if (loop ? (lastTime % endTime > time % endTime) : (lastTime < endTime && time >= endTime))\n            {\n                var count = Math.floor(time / endTime);\n                if (current.onComplete) current.onComplete(i, count);\n                if (this.onComplete) this.onComplete(i, count);\n            }\n\n            current.lastTime = current.time;\n        }\n    },\n    clearTracks: function ()\n    {\n        for (var i = 0, n = this.tracks.length; i < n; i++)\n            this.clearTrack(i);\n        this.tracks.length = 0;\n    },\n    clearTrack: function (trackIndex)\n    {\n        if (trackIndex >= this.tracks.length) return;\n        var current = this.tracks[trackIndex];\n        if (!current) return;\n\n        if (current.onEnd) current.onEnd(trackIndex);\n        if (this.onEnd) this.onEnd(trackIndex);\n\n        this.tracks[trackIndex] = null;\n    },\n    _expandToIndex: function (index)\n    {\n        if (index < this.tracks.length) return this.tracks[index];\n        while (index >= this.tracks.length)\n            this.tracks.push(null);\n        return null;\n    },\n    setCurrent: function (index, entry)\n    {\n        var current = this._expandToIndex(index);\n        if (current)\n        {\n            var previous = current.previous;\n            current.previous = null;\n\n            if (current.onEnd) current.onEnd(index);\n            if (this.onEnd) this.onEnd(index);\n\n            entry.mixDuration = this.data.getMix(current.animation, entry.animation);\n            if (entry.mixDuration > 0)\n            {\n                entry.mixTime = 0;\n                // If a mix is in progress, mix from the closest animation.\n                if (previous && current.mixTime / current.mixDuration < 0.5)\n                    entry.previous = previous;\n                else\n                    entry.previous = current;\n            }\n        }\n\n        this.tracks[index] = entry;\n\n        if (entry.onStart) entry.onStart(index);\n        if (this.onStart) this.onStart(index);\n    },\n    setAnimationByName: function (trackIndex, animationName, loop)\n    {\n        var animation = this.data.skeletonData.findAnimation(animationName);\n        if (!animation) throw \"Animation not found: \" + animationName;\n        return this.setAnimation(trackIndex, animation, loop);\n    },\n    /** Set the current animation. Any queued animations are cleared. */\n    setAnimation: function (trackIndex, animation, loop)\n    {\n        var entry = new spine.TrackEntry();\n        entry.animation = animation;\n        entry.loop = loop;\n        entry.endTime = animation.duration;\n        this.setCurrent(trackIndex, entry);\n        return entry;\n    },\n    addAnimationByName: function (trackIndex, animationName, loop, delay)\n    {\n        var animation = this.data.skeletonData.findAnimation(animationName);\n        if (!animation) throw \"Animation not found: \" + animationName;\n        return this.addAnimation(trackIndex, animation, loop, delay);\n    },\n    /** Adds an animation to be played delay seconds after the current or last queued animation.\n     * @param delay May be <= 0 to use duration of previous animation minus any mix duration plus the negative delay. */\n    addAnimation: function (trackIndex, animation, loop, delay)\n    {\n        var entry = new spine.TrackEntry();\n        entry.animation = animation;\n        entry.loop = loop;\n        entry.endTime = animation.duration;\n\n        var last = this._expandToIndex(trackIndex);\n        if (last)\n        {\n            while (last.next)\n                last = last.next;\n            last.next = entry;\n        } else\n            this.tracks[trackIndex] = entry;\n\n        if (delay <= 0)\n        {\n            if (last)\n                delay += last.endTime - this.data.getMix(last.animation, animation);\n            else\n                delay = 0;\n        }\n        entry.delay = delay;\n\n        return entry;\n    },\n    /** May be null. */\n    getCurrent: function (trackIndex)\n    {\n        if (trackIndex >= this.tracks.length) return null;\n        return this.tracks[trackIndex];\n    }\n};\nmodule.exports = spine.AnimationState;\n\n","var spine = require('../SpineUtil');\nspine.AnimationStateData = function (skeletonData)\n{\n    this.skeletonData = skeletonData;\n    this.animationToMixTime = {};\n};\nspine.AnimationStateData.prototype = {\n    defaultMix: 0,\n    setMixByName: function (fromName, toName, duration)\n    {\n        var from = this.skeletonData.findAnimation(fromName);\n        if (!from) throw \"Animation not found: \" + fromName;\n        var to = this.skeletonData.findAnimation(toName);\n        if (!to) throw \"Animation not found: \" + toName;\n        this.setMix(from, to, duration);\n    },\n    setMix: function (from, to, duration)\n    {\n        this.animationToMixTime[from.name + \":\" + to.name] = duration;\n    },\n    getMix: function (from, to)\n    {\n        var key = from.name + \":\" + to.name;\n        return this.animationToMixTime.hasOwnProperty(key) ? this.animationToMixTime[key] : this.defaultMix;\n    }\n};\nmodule.exports = spine.AnimationStateData;\n\n","var spine = require('../SpineUtil');\nspine.AtlasReader = require('./AtlasReader');\nspine.AtlasPage = require('./AtlasPage');\nspine.AtlasRegion = require('./AtlasRegion');\n\nspine.Atlas = function (atlasText, baseUrl, crossOrigin)\n{\n    if (baseUrl && baseUrl.indexOf('/') !== baseUrl.length)\n    {\n        baseUrl += '/';\n    }\n\n    this.pages = [];\n    this.regions = [];\n\n    this.texturesLoading = 0;\n\n    var self = this;\n\n    var reader = new spine.AtlasReader(atlasText);\n    var tuple = [];\n    tuple.length = 4;\n    var page = null;\n    while (true)\n    {\n        var line = reader.readLine();\n        if (line === null) break;\n        line = reader.trim(line);\n        if (!line.length)\n            page = null;\n        else if (!page)\n        {\n            page = new spine.AtlasPage();\n            page.name = line;\n\n            if (reader.readTuple(tuple) == 2)\n            { // size is only optional for an atlas packed with an old TexturePacker.\n                page.width = parseInt(tuple[0]);\n                page.height = parseInt(tuple[1]);\n                reader.readTuple(tuple);\n            }\n            page.format = spine.Atlas.Format[tuple[0]];\n\n            reader.readTuple(tuple);\n            page.minFilter = spine.Atlas.TextureFilter[tuple[0]];\n            page.magFilter = spine.Atlas.TextureFilter[tuple[1]];\n\n            var direction = reader.readValue();\n            page.uWrap = spine.Atlas.TextureWrap.clampToEdge;\n            page.vWrap = spine.Atlas.TextureWrap.clampToEdge;\n            if (direction == \"x\")\n                page.uWrap = spine.Atlas.TextureWrap.repeat;\n            else if (direction == \"y\")\n                page.vWrap = spine.Atlas.TextureWrap.repeat;\n            else if (direction == \"xy\")\n                page.uWrap = page.vWrap = spine.Atlas.TextureWrap.repeat;\n\n            page.rendererObject = PIXI.BaseTexture.fromImage(baseUrl + line, crossOrigin);\n\n            this.pages.push(page);\n\n        } else {\n            var region = new spine.AtlasRegion();\n            region.name = line;\n            region.page = page;\n\n            region.rotate = reader.readValue() == \"true\";\n\n            reader.readTuple(tuple);\n            var x = parseInt(tuple[0]);\n            var y = parseInt(tuple[1]);\n\n            reader.readTuple(tuple);\n            var width = parseInt(tuple[0]);\n            var height = parseInt(tuple[1]);\n\n            region.u = x / page.width;\n            region.v = y / page.height;\n            if (region.rotate)\n            {\n                region.u2 = (x + height) / page.width;\n                region.v2 = (y + width) / page.height;\n            } else {\n                region.u2 = (x + width) / page.width;\n                region.v2 = (y + height) / page.height;\n            }\n            region.x = x;\n            region.y = y;\n            region.width = Math.abs(width);\n            region.height = Math.abs(height);\n\n            if (reader.readTuple(tuple) == 4)\n            { // split is optional\n                region.splits = [parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3])];\n\n                if (reader.readTuple(tuple) == 4)\n                { // pad is optional, but only present with splits\n                    region.pads = [parseInt(tuple[0]), parseInt(tuple[1]), parseInt(tuple[2]), parseInt(tuple[3])];\n\n                    reader.readTuple(tuple);\n                }\n            }\n\n            region.originalWidth = parseInt(tuple[0]);\n            region.originalHeight = parseInt(tuple[1]);\n\n            reader.readTuple(tuple);\n            region.offsetX = parseInt(tuple[0]);\n            region.offsetY = parseInt(tuple[1]);\n\n            region.index = parseInt(reader.readValue());\n\n            this.regions.push(region);\n        }\n    }\n};\nspine.Atlas.prototype = {\n    findRegion: function (name)\n    {\n        var regions = this.regions;\n        for (var i = 0, n = regions.length; i < n; i++)\n            if (regions[i].name == name) return regions[i];\n        return null;\n    },\n    dispose: function ()\n    {\n        var pages = this.pages;\n        for (var i = 0, n = pages.length; i < n; i++)\n            pages[i].rendererObject.destroy(true);\n    },\n    updateUVs: function (page)\n    {\n        var regions = this.regions;\n        for (var i = 0, n = regions.length; i < n; i++)\n        {\n            var region = regions[i];\n            if (region.page != page) continue;\n            region.u = region.x / page.width;\n            region.v = region.y / page.height;\n            if (region.rotate)\n            {\n                region.u2 = (region.x + region.height) / page.width;\n                region.v2 = (region.y + region.width) / page.height;\n            } else {\n                region.u2 = (region.x + region.width) / page.width;\n                region.v2 = (region.y + region.height) / page.height;\n            }\n        }\n    }\n};\n\nspine.Atlas.Format = {\n    alpha: 0,\n    intensity: 1,\n    luminanceAlpha: 2,\n    rgb565: 3,\n    rgba4444: 4,\n    rgb888: 5,\n    rgba8888: 6\n};\n\nspine.Atlas.TextureFilter = {\n    nearest: 0,\n    linear: 1,\n    mipMap: 2,\n    mipMapNearestNearest: 3,\n    mipMapLinearNearest: 4,\n    mipMapNearestLinear: 5,\n    mipMapLinearLinear: 6\n};\n\nspine.Atlas.TextureWrap = {\n    mirroredRepeat: 0,\n    clampToEdge: 1,\n    repeat: 2\n};\nmodule.exports = spine.Atlas;\n","var spine = require('../SpineUtil');\nspine.RegionAttachment = require('./RegionAttachment');\nspine.MeshAttachment = require('./MeshAttachment');\nspine.SkinnedMeshAttachment = require('./SkinnedMeshAttachment');\nspine.BoundingBoxAttachment = require('./BoundingBoxAttachment');\nspine.AtlasAttachmentParser = function (atlas)\n{\n    this.atlas = atlas;\n};\nspine.AtlasAttachmentParser.prototype = {\n    newRegionAttachment: function (skin, name, path)\n    {\n        var region = this.atlas.findRegion(path);\n        if (!region) throw \"Region not found in atlas: \" + path + \" (region attachment: \" + name + \")\";\n        var attachment = new spine.RegionAttachment(name);\n        attachment.rendererObject = region;\n        attachment.setUVs(region.u, region.v, region.u2, region.v2, region.rotate);\n        attachment.regionOffsetX = region.offsetX;\n        attachment.regionOffsetY = region.offsetY;\n        attachment.regionWidth = region.width;\n        attachment.regionHeight = region.height;\n        attachment.regionOriginalWidth = region.originalWidth;\n        attachment.regionOriginalHeight = region.originalHeight;\n        return attachment;\n    },\n    newMeshAttachment: function (skin, name, path)\n    {\n        var region = this.atlas.findRegion(path);\n        if (!region) throw \"Region not found in atlas: \" + path + \" (mesh attachment: \" + name + \")\";\n        var attachment = new spine.MeshAttachment(name);\n        attachment.rendererObject = region;\n        attachment.regionU = region.u;\n        attachment.regionV = region.v;\n        attachment.regionU2 = region.u2;\n        attachment.regionV2 = region.v2;\n        attachment.regionRotate = region.rotate;\n        attachment.regionOffsetX = region.offsetX;\n        attachment.regionOffsetY = region.offsetY;\n        attachment.regionWidth = region.width;\n        attachment.regionHeight = region.height;\n        attachment.regionOriginalWidth = region.originalWidth;\n        attachment.regionOriginalHeight = region.originalHeight;\n        return attachment;\n    },\n    newSkinnedMeshAttachment: function (skin, name, path)\n    {\n        var region = this.atlas.findRegion(path);\n        if (!region) throw \"Region not found in atlas: \" + path + \" (skinned mesh attachment: \" + name + \")\";\n        var attachment = new spine.SkinnedMeshAttachment(name);\n        attachment.rendererObject = region;\n        attachment.regionU = region.u;\n        attachment.regionV = region.v;\n        attachment.regionU2 = region.u2;\n        attachment.regionV2 = region.v2;\n        attachment.regionRotate = region.rotate;\n        attachment.regionOffsetX = region.offsetX;\n        attachment.regionOffsetY = region.offsetY;\n        attachment.regionWidth = region.width;\n        attachment.regionHeight = region.height;\n        attachment.regionOriginalWidth = region.originalWidth;\n        attachment.regionOriginalHeight = region.originalHeight;\n        return attachment;\n    },\n    newBoundingBoxAttachment: function (skin, name)\n    {\n        return new spine.BoundingBoxAttachment(name);\n    }\n};\nmodule.exports = spine.AtlasAttachmentParser;\n\n","var spine = require('../SpineUtil');\nspine.AtlasPage = function ()\n{};\nspine.AtlasPage.prototype = {\n    name: null,\n    format: null,\n    minFilter: null,\n    magFilter: null,\n    uWrap: null,\n    vWrap: null,\n    rendererObject: null,\n    width: 0,\n    height: 0\n};\nmodule.exports = spine.AtlasPage;\n\n","var spine = require('../SpineUtil');\nspine.AtlasReader = function (text)\n{\n    this.lines = text.split(/\\r\\n|\\r|\\n/);\n};\nspine.AtlasReader.prototype = {\n    index: 0,\n    trim: function (value)\n    {\n        return value.replace(/^\\s+|\\s+$/g, \"\");\n    },\n    readLine: function ()\n    {\n        if (this.index >= this.lines.length) return null;\n        return this.lines[this.index++];\n    },\n    readValue: function ()\n    {\n        var line = this.readLine();\n        var colon = line.indexOf(\":\");\n        if (colon == -1) throw \"Invalid line: \" + line;\n        return this.trim(line.substring(colon + 1));\n    },\n    /** Returns the number of tuple values read (1, 2 or 4). */\n    readTuple: function (tuple)\n    {\n        var line = this.readLine();\n        var colon = line.indexOf(\":\");\n        if (colon == -1) throw \"Invalid line: \" + line;\n        var i = 0, lastMatch = colon + 1;\n        for (; i < 3; i++)\n        {\n            var comma = line.indexOf(\",\", lastMatch);\n            if (comma == -1) break;\n            tuple[i] = this.trim(line.substr(lastMatch, comma - lastMatch));\n            lastMatch = comma + 1;\n        }\n        tuple[i] = this.trim(line.substring(lastMatch));\n        return i + 1;\n    }\n};\nmodule.exports = spine.AtlasReader;\n\n","var spine = require('../SpineUtil');\nspine.AtlasRegion = function ()\n{};\nspine.AtlasRegion.prototype = {\n    page: null,\n    name: null,\n    x: 0, y: 0,\n    width: 0, height: 0,\n    u: 0, v: 0, u2: 0, v2: 0,\n    offsetX: 0, offsetY: 0,\n    originalWidth: 0, originalHeight: 0,\n    index: 0,\n    rotate: false,\n    splits: null,\n    pads: null\n};\nmodule.exports = spine.AtlasRegion;\n\n","var spine = require('../SpineUtil');\nspine.Curves = require('./Curves');\nspine.Animation = require('./Animation');\nspine.AttachmentTimeline = function (frameCount)\n{\n    this.curves = new spine.Curves(frameCount);\n    this.frames = []; // time, ...\n    this.frames.length = frameCount;\n    this.attachmentNames = [];\n    this.attachmentNames.length = frameCount;\n};\nspine.AttachmentTimeline.prototype = {\n    slotIndex: 0,\n    getFrameCount: function ()\n    {\n        return this.frames.length;\n    },\n    setFrame: function (frameIndex, time, attachmentName)\n    {\n        this.frames[frameIndex] = time;\n        this.attachmentNames[frameIndex] = attachmentName;\n    },\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\n    {\n        var frames = this.frames;\n        if (time < frames[0])\n        {\n            if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);\n            return;\n        } else if (lastTime > time) //\n            lastTime = -1;\n\n        var frameIndex = time >= frames[frames.length - 1] ? frames.length - 1 : spine.Animation.binarySearch1(frames, time) - 1;\n        if (frames[frameIndex] < lastTime) return;\n\n        var attachmentName = this.attachmentNames[frameIndex];\n        skeleton.slots[this.slotIndex].setAttachment(\n            !attachmentName ? null : skeleton.getAttachmentBySlotIndex(this.slotIndex, attachmentName));\n    }\n};\nmodule.exports = spine.AttachmentTimeline;\n\n","var spine = require('../SpineUtil');\nspine.AttachmentType = {\n    region: 0,\n    boundingbox: 1,\n    mesh: 2,\n    skinnedmesh: 3\n};\nmodule.exports = spine.AttachmentType;\n\n","var spine = require('../SpineUtil');\nspine.Bone = function (boneData, skeleton, parent)\n{\n    this.data = boneData;\n    this.skeleton = skeleton;\n    this.parent = parent;\n    this.setToSetupPose();\n};\nspine.Bone.yDown = false;\nspine.Bone.prototype = {\n    x: 0, y: 0,\n    rotation: 0, rotationIK: 0,\n    scaleX: 1, scaleY: 1,\n    flipX: false, flipY: false,\n    m00: 0, m01: 0, worldX: 0, // a b x\n    m10: 0, m11: 0, worldY: 0, // c d y\n    worldRotation: 0,\n    worldScaleX: 1, worldScaleY: 1,\n    worldFlipX: false, worldFlipY: false,\n    updateWorldTransform: function ()\n    {\n        var parent = this.parent;\n        if (parent)\n        {\n            this.worldX = this.x * parent.m00 + this.y * parent.m01 + parent.worldX;\n            this.worldY = this.x * parent.m10 + this.y * parent.m11 + parent.worldY;\n            if (this.data.inheritScale)\n            {\n                this.worldScaleX = parent.worldScaleX * this.scaleX;\n                this.worldScaleY = parent.worldScaleY * this.scaleY;\n            } else {\n                this.worldScaleX = this.scaleX;\n                this.worldScaleY = this.scaleY;\n            }\n            this.worldRotation = this.data.inheritRotation ? (parent.worldRotation + this.rotationIK) : this.rotationIK;\n            this.worldFlipX = parent.worldFlipX != this.flipX;\n            this.worldFlipY = parent.worldFlipY != this.flipY;\n        } else {\n            var skeletonFlipX = this.skeleton.flipX, skeletonFlipY = this.skeleton.flipY;\n            this.worldX = skeletonFlipX ? -this.x : this.x;\n            this.worldY = (skeletonFlipY != spine.Bone.yDown) ? -this.y : this.y;\n            this.worldScaleX = this.scaleX;\n            this.worldScaleY = this.scaleY;\n            this.worldRotation = this.rotationIK;\n            this.worldFlipX = skeletonFlipX != this.flipX;\n            this.worldFlipY = skeletonFlipY != this.flipY;\n        }\n        var radians = this.worldRotation * spine.degRad;\n        var cos = Math.cos(radians);\n        var sin = Math.sin(radians);\n        if (this.worldFlipX)\n        {\n            this.m00 = -cos * this.worldScaleX;\n            this.m01 = sin * this.worldScaleY;\n        } else {\n            this.m00 = cos * this.worldScaleX;\n            this.m01 = -sin * this.worldScaleY;\n        }\n        if (this.worldFlipY != spine.Bone.yDown)\n        {\n            this.m10 = -sin * this.worldScaleX;\n            this.m11 = -cos * this.worldScaleY;\n        } else {\n            this.m10 = sin * this.worldScaleX;\n            this.m11 = cos * this.worldScaleY;\n        }\n    },\n    setToSetupPose: function ()\n    {\n        var data = this.data;\n        this.x = data.x;\n        this.y = data.y;\n        this.rotation = data.rotation;\n        this.rotationIK = this.rotation;\n        this.scaleX = data.scaleX;\n        this.scaleY = data.scaleY;\n        this.flipX = data.flipX;\n        this.flipY = data.flipY;\n    },\n    worldToLocal: function (world)\n    {\n        var dx = world[0] - this.worldX, dy = world[1] - this.worldY;\n        var m00 = this.m00, m10 = this.m10, m01 = this.m01, m11 = this.m11;\n        if (this.worldFlipX != (this.worldFlipY != spine.Bone.yDown))\n        {\n            m00 = -m00;\n            m11 = -m11;\n        }\n        var invDet = 1 / (m00 * m11 - m01 * m10);\n        world[0] = dx * m00 * invDet - dy * m01 * invDet;\n        world[1] = dy * m11 * invDet - dx * m10 * invDet;\n    },\n    localToWorld: function (local)\n    {\n        var localX = local[0], localY = local[1];\n        local[0] = localX * this.m00 + localY * this.m01 + this.worldX;\n        local[1] = localX * this.m10 + localY * this.m11 + this.worldY;\n    }\n};\nmodule.exports = spine.Bone;\n\n","var spine = require('../SpineUtil');\nspine.BoneData = function (name, parent)\n{\n    this.name = name;\n    this.parent = parent;\n};\nspine.BoneData.prototype = {\n    length: 0,\n    x: 0, y: 0,\n    rotation: 0,\n    scaleX: 1, scaleY: 1,\n    inheritScale: true,\n    inheritRotation: true,\n    flipX: false, flipY: false\n};\nmodule.exports = spine.BoneData;\n\n","var spine = require('../SpineUtil');\nspine.AttachmentType = require('./AttachmentType');\nspine.BoundingBoxAttachment = function (name)\n{\n    this.name = name;\n    this.vertices = [];\n};\nspine.BoundingBoxAttachment.prototype = {\n    type: spine.AttachmentType.boundingbox,\n    computeWorldVertices: function (x, y, bone, worldVertices)\n    {\n        x += bone.worldX;\n        y += bone.worldY;\n        var m00 = bone.m00, m01 = bone.m01, m10 = bone.m10, m11 = bone.m11;\n        var vertices = this.vertices;\n        for (var i = 0, n = vertices.length; i < n; i += 2)\n        {\n            var px = vertices[i];\n            var py = vertices[i + 1];\n            worldVertices[i] = px * m00 + py * m01 + x;\n            worldVertices[i + 1] = px * m10 + py * m11 + y;\n        }\n    }\n};\nmodule.exports = spine.BoundingBoxAttachment;\n\n","var spine = require('../SpineUtil');\nspine.Animation = require('./Animation');\nspine.Curves = require('./Curves');\nspine.ColorTimeline = function (frameCount)\n{\n    this.curves = new spine.Curves(frameCount);\n    this.frames = []; // time, r, g, b, a, ...\n    this.frames.length = frameCount * 5;\n};\nspine.ColorTimeline.prototype = {\n    slotIndex: 0,\n    getFrameCount: function ()\n    {\n        return this.frames.length / 5;\n    },\n    setFrame: function (frameIndex, time, r, g, b, a)\n    {\n        frameIndex *= 5;\n        this.frames[frameIndex] = time;\n        this.frames[frameIndex + 1] = r;\n        this.frames[frameIndex + 2] = g;\n        this.frames[frameIndex + 3] = b;\n        this.frames[frameIndex + 4] = a;\n    },\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\n    {\n        var frames = this.frames;\n        if (time < frames[0]) return; // Time is before first frame.\n\n        var r, g, b, a;\n        if (time >= frames[frames.length - 5])\n        {\n            // Time is after last frame.\n            var i = frames.length - 1;\n            r = frames[i - 3];\n            g = frames[i - 2];\n            b = frames[i - 1];\n            a = frames[i];\n        } else {\n            // Interpolate between the previous frame and the current frame.\n            var frameIndex = spine.Animation.binarySearch(frames, time, 5);\n            var prevFrameR = frames[frameIndex - 4];\n            var prevFrameG = frames[frameIndex - 3];\n            var prevFrameB = frames[frameIndex - 2];\n            var prevFrameA = frames[frameIndex - 1];\n            var frameTime = frames[frameIndex];\n            var percent = 1 - (time - frameTime) / (frames[frameIndex - 5/*PREV_FRAME_TIME*/] - frameTime);\n            percent = this.curves.getCurvePercent(frameIndex / 5 - 1, percent);\n\n            r = prevFrameR + (frames[frameIndex + 1/*FRAME_R*/] - prevFrameR) * percent;\n            g = prevFrameG + (frames[frameIndex + 2/*FRAME_G*/] - prevFrameG) * percent;\n            b = prevFrameB + (frames[frameIndex + 3/*FRAME_B*/] - prevFrameB) * percent;\n            a = prevFrameA + (frames[frameIndex + 4/*FRAME_A*/] - prevFrameA) * percent;\n        }\n        var slot = skeleton.slots[this.slotIndex];\n        if (alpha < 1)\n        {\n            slot.r += (r - slot.r) * alpha;\n            slot.g += (g - slot.g) * alpha;\n            slot.b += (b - slot.b) * alpha;\n            slot.a += (a - slot.a) * alpha;\n        } else {\n            slot.r = r;\n            slot.g = g;\n            slot.b = b;\n            slot.a = a;\n        }\n    }\n};\nmodule.exports = spine.ColorTimeline;\n\n","var spine = require('../SpineUtil');\nspine.Curves = function (frameCount)\n{\n    this.curves = []; // type, x, y, ...\n    //this.curves.length = (frameCount - 1) * 19/*BEZIER_SIZE*/;\n};\nspine.Curves.prototype = {\n    setLinear: function (frameIndex)\n    {\n        this.curves[frameIndex * 19/*BEZIER_SIZE*/] = 0/*LINEAR*/;\n    },\n    setStepped: function (frameIndex)\n    {\n        this.curves[frameIndex * 19/*BEZIER_SIZE*/] = 1/*STEPPED*/;\n    },\n    /** Sets the control handle positions for an interpolation bezier curve used to transition from this keyframe to the next.\n     * cx1 and cx2 are from 0 to 1, representing the percent of time between the two keyframes. cy1 and cy2 are the percent of\n     * the difference between the keyframe's values. */\n    setCurve: function (frameIndex, cx1, cy1, cx2, cy2)\n    {\n        var subdiv1 = 1 / 10/*BEZIER_SEGMENTS*/, subdiv2 = subdiv1 * subdiv1, subdiv3 = subdiv2 * subdiv1;\n        var pre1 = 3 * subdiv1, pre2 = 3 * subdiv2, pre4 = 6 * subdiv2, pre5 = 6 * subdiv3;\n        var tmp1x = -cx1 * 2 + cx2, tmp1y = -cy1 * 2 + cy2, tmp2x = (cx1 - cx2) * 3 + 1, tmp2y = (cy1 - cy2) * 3 + 1;\n        var dfx = cx1 * pre1 + tmp1x * pre2 + tmp2x * subdiv3, dfy = cy1 * pre1 + tmp1y * pre2 + tmp2y * subdiv3;\n        var ddfx = tmp1x * pre4 + tmp2x * pre5, ddfy = tmp1y * pre4 + tmp2y * pre5;\n        var dddfx = tmp2x * pre5, dddfy = tmp2y * pre5;\n\n        var i = frameIndex * 19/*BEZIER_SIZE*/;\n        var curves = this.curves;\n        curves[i++] = 2/*BEZIER*/;\n\n        var x = dfx, y = dfy;\n        for (var n = i + 19/*BEZIER_SIZE*/ - 1; i < n; i += 2)\n        {\n            curves[i] = x;\n            curves[i + 1] = y;\n            dfx += ddfx;\n            dfy += ddfy;\n            ddfx += dddfx;\n            ddfy += dddfy;\n            x += dfx;\n            y += dfy;\n        }\n    },\n    getCurvePercent: function (frameIndex, percent)\n    {\n        percent = percent < 0 ? 0 : (percent > 1 ? 1 : percent);\n        var curves = this.curves;\n        var i = frameIndex * 19/*BEZIER_SIZE*/;\n        var type = curves[i];\n        if (type === 0/*LINEAR*/) return percent;\n        if (type == 1/*STEPPED*/) return 0;\n        i++;\n        var x = 0;\n        for (var start = i, n = i + 19/*BEZIER_SIZE*/ - 1; i < n; i += 2)\n        {\n            x = curves[i];\n            if (x >= percent)\n            {\n                var prevX, prevY;\n                if (i == start)\n                {\n                    prevX = 0;\n                    prevY = 0;\n                } else {\n                    prevX = curves[i - 2];\n                    prevY = curves[i - 1];\n                }\n                return prevY + (curves[i + 1] - prevY) * (percent - prevX) / (x - prevX);\n            }\n        }\n        var y = curves[i - 1];\n        return y + (1 - y) * (percent - x) / (1 - x); // Last point is 1,1.\n    }\n};\nmodule.exports = spine.Curves;\n\n","var spine = require('../SpineUtil');\nspine.Animation = require('./Animation');\nspine.DrawOrderTimeline = function (frameCount)\n{\n    this.frames = []; // time, ...\n    this.frames.length = frameCount;\n    this.drawOrders = [];\n    this.drawOrders.length = frameCount;\n};\nspine.DrawOrderTimeline.prototype = {\n    getFrameCount: function ()\n    {\n        return this.frames.length;\n    },\n    setFrame: function (frameIndex, time, drawOrder)\n    {\n        this.frames[frameIndex] = time;\n        this.drawOrders[frameIndex] = drawOrder;\n    },\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\n    {\n        var frames = this.frames;\n        if (time < frames[0]) return; // Time is before first frame.\n\n        var frameIndex;\n        if (time >= frames[frames.length - 1]) // Time is after last frame.\n            frameIndex = frames.length - 1;\n        else\n            frameIndex = spine.Animation.binarySearch1(frames, time) - 1;\n\n        var drawOrder = skeleton.drawOrder;\n        var slots = skeleton.slots;\n        var drawOrderToSetupIndex = this.drawOrders[frameIndex];\n        if (drawOrderToSetupIndex)\n        {\n            for (var i = 0, n = drawOrderToSetupIndex.length; i < n; i++)\n            {\n                drawOrder[i] = drawOrderToSetupIndex[i];\n            }\n        }\n\n    }\n};\nmodule.exports = spine.DrawOrderTimeline;\n\n","var spine = require('../SpineUtil');\nspine.Event = function (data)\n{\n    this.data = data;\n};\nspine.Event.prototype = {\n    intValue: 0,\n    floatValue: 0,\n    stringValue: null\n};\nmodule.exports = spine.Event;\n\n","var spine = require('../SpineUtil');\nspine.EventData = function (name)\n{\n    this.name = name;\n};\nspine.EventData.prototype = {\n    intValue: 0,\n    floatValue: 0,\n    stringValue: null\n};\nmodule.exports = spine.EventData;\n\n","var spine = require('../SpineUtil');\nspine.Animation = require('./Animation');\nspine.EventTimeline = function (frameCount)\n{\n    this.frames = []; // time, ...\n    this.frames.length = frameCount;\n    this.events = [];\n    this.events.length = frameCount;\n};\nspine.EventTimeline.prototype = {\n    getFrameCount: function ()\n    {\n        return this.frames.length;\n    },\n    setFrame: function (frameIndex, time, event)\n    {\n        this.frames[frameIndex] = time;\n        this.events[frameIndex] = event;\n    },\n    /** Fires events for frames > lastTime and <= time. */\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\n    {\n        if (!firedEvents) return;\n\n        var frames = this.frames;\n        var frameCount = frames.length;\n\n        if (lastTime > time)\n        { // Fire events after last time for looped animations.\n            this.apply(skeleton, lastTime, Number.MAX_VALUE, firedEvents, alpha);\n            lastTime = -1;\n        } else if (lastTime >= frames[frameCount - 1]) // Last time is after last frame.\n            return;\n        if (time < frames[0]) return; // Time is before first frame.\n\n        var frameIndex;\n        if (lastTime < frames[0])\n            frameIndex = 0;\n        else\n        {\n            frameIndex = spine.Animation.binarySearch1(frames, lastTime);\n            var frame = frames[frameIndex];\n            while (frameIndex > 0)\n            { // Fire multiple events with the same frame.\n                if (frames[frameIndex - 1] != frame) break;\n                frameIndex--;\n            }\n        }\n        var events = this.events;\n        for (; frameIndex < frameCount && time >= frames[frameIndex]; frameIndex++)\n            firedEvents.push(events[frameIndex]);\n    }\n};\nmodule.exports = spine.EventTimeline;\n\n","var spine = require('../SpineUtil');\nspine.Animation = require('./Animation');\nspine.Curves = require('./Curves');\nspine.FfdTimeline = function (frameCount)\n{\n    this.curves = new spine.Curves(frameCount);\n    this.frames = [];\n    this.frames.length = frameCount;\n    this.frameVertices = [];\n    this.frameVertices.length = frameCount;\n};\nspine.FfdTimeline.prototype = {\n    slotIndex: 0,\n    attachment: 0,\n    getFrameCount: function ()\n    {\n        return this.frames.length;\n    },\n    setFrame: function (frameIndex, time, vertices)\n    {\n        this.frames[frameIndex] = time;\n        this.frameVertices[frameIndex] = vertices;\n    },\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\n    {\n        var slot = skeleton.slots[this.slotIndex];\n        if (slot.attachment != this.attachment) return;\n\n        var frames = this.frames;\n        if (time < frames[0]) return; // Time is before first frame.\n\n        var frameVertices = this.frameVertices;\n        var vertexCount = frameVertices[0].length;\n\n        var vertices = slot.attachmentVertices;\n        if (vertices.length != vertexCount) alpha = 1;\n        vertices.length = vertexCount;\n\n        if (time >= frames[frames.length - 1])\n        { // Time is after last frame.\n            var lastVertices = frameVertices[frames.length - 1];\n            if (alpha < 1)\n            {\n                for (var i = 0; i < vertexCount; i++)\n                    vertices[i] += (lastVertices[i] - vertices[i]) * alpha;\n            } else {\n                for (var i = 0; i < vertexCount; i++)\n                    vertices[i] = lastVertices[i];\n            }\n            return;\n        }\n\n        // Interpolate between the previous frame and the current frame.\n        var frameIndex = spine.Animation.binarySearch1(frames, time);\n        var frameTime = frames[frameIndex];\n        var percent = 1 - (time - frameTime) / (frames[frameIndex - 1] - frameTime);\n        percent = this.curves.getCurvePercent(frameIndex - 1, percent < 0 ? 0 : (percent > 1 ? 1 : percent));\n\n        var prevVertices = frameVertices[frameIndex - 1];\n        var nextVertices = frameVertices[frameIndex];\n\n        if (alpha < 1)\n        {\n            for (var i = 0; i < vertexCount; i++)\n            {\n                var prev = prevVertices[i];\n                vertices[i] += (prev + (nextVertices[i] - prev) * percent - vertices[i]) * alpha;\n            }\n        } else {\n            for (var i = 0; i < vertexCount; i++)\n            {\n                var prev = prevVertices[i];\n                vertices[i] = prev + (nextVertices[i] - prev) * percent;\n            }\n        }\n    }\n};\nmodule.exports = spine.FfdTimeline;\n\n","var spine = require('../SpineUtil');\nspine.Animation = require('./Animation');\nspine.Curves = require('./Curves');\nspine.FlipXTimeline = function (frameCount)\n{\n    this.curves = new spine.Curves(frameCount);\n    this.frames = []; // time, flip, ...\n    this.frames.length = frameCount * 2;\n};\nspine.FlipXTimeline.prototype = {\n    boneIndex: 0,\n    getFrameCount: function ()\n    {\n        return this.frames.length / 2;\n    },\n    setFrame: function (frameIndex, time, flip)\n    {\n        frameIndex *= 2;\n        this.frames[frameIndex] = time;\n        this.frames[frameIndex + 1] = flip ? 1 : 0;\n    },\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\n    {\n        var frames = this.frames;\n        if (time < frames[0])\n        {\n            if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);\n            return;\n        } else if (lastTime > time) //\n            lastTime = -1;\n        var frameIndex = (time >= frames[frames.length - 2] ? frames.length : spine.Animation.binarySearch(frames, time, 2)) - 2;\n        if (frames[frameIndex] < lastTime) return;\n        skeleton.bones[this.boneIndex].flipX = frames[frameIndex + 1] != 0;\n    }\n};\nmodule.exports = spine.FlipXTimeline;\n\n","var spine = require('../SpineUtil');\nspine.Animation = require('./Animation');\nspine.Curves = require('./Curves');\nspine.FlipYTimeline = function (frameCount)\n{\n    this.curves = new spine.Curves(frameCount);\n    this.frames = []; // time, flip, ...\n    this.frames.length = frameCount * 2;\n};\nspine.FlipYTimeline.prototype = {\n    boneIndex: 0,\n    getFrameCount: function ()\n    {\n        return this.frames.length / 2;\n    },\n    setFrame: function (frameIndex, time, flip)\n    {\n        frameIndex *= 2;\n        this.frames[frameIndex] = time;\n        this.frames[frameIndex + 1] = flip ? 1 : 0;\n    },\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\n    {\n        var frames = this.frames;\n        if (time < frames[0])\n        {\n            if (lastTime > time) this.apply(skeleton, lastTime, Number.MAX_VALUE, null, 0);\n            return;\n        } else if (lastTime > time) //\n            lastTime = -1;\n        var frameIndex = (time >= frames[frames.length - 2] ? frames.length : spine.Animation.binarySearch(frames, time, 2)) - 2;\n        if (frames[frameIndex] < lastTime) return;\n        skeleton.bones[this.boneIndex].flipY = frames[frameIndex + 1] != 0;\n    }\n};\nmodule.exports = spine.FlipYTimeline;\n\n","var spine = require('../SpineUtil');\nspine.IkConstraint = function (data, skeleton)\n{\n    this.data = data;\n    this.mix = data.mix;\n    this.bendDirection = data.bendDirection;\n\n    this.bones = [];\n    for (var i = 0, n = data.bones.length; i < n; i++)\n        this.bones.push(skeleton.findBone(data.bones[i].name));\n    this.target = skeleton.findBone(data.target.name);\n};\nspine.IkConstraint.prototype = {\n    apply: function ()\n    {\n        var target = this.target;\n        var bones = this.bones;\n        switch (bones.length)\n        {\n        case 1:\n            spine.IkConstraint.apply1(bones[0], target.worldX, target.worldY, this.mix);\n            break;\n        case 2:\n            spine.IkConstraint.apply2(bones[0], bones[1], target.worldX, target.worldY, this.bendDirection, this.mix);\n            break;\n        }\n    }\n};\n/** Adjusts the bone rotation so the tip is as close to the target position as possible. The target is specified in the world\n * coordinate system. */\nspine.IkConstraint.apply1 = function (bone, targetX, targetY, alpha)\n{\n    var parentRotation = (!bone.data.inheritRotation || !bone.parent) ? 0 : bone.parent.worldRotation;\n    var rotation = bone.rotation;\n    var rotationIK = Math.atan2(targetY - bone.worldY, targetX - bone.worldX) * spine.radDeg - parentRotation;\n    bone.rotationIK = rotation + (rotationIK - rotation) * alpha;\n};\n/** Adjusts the parent and child bone rotations so the tip of the child is as close to the target position as possible. The\n * target is specified in the world coordinate system.\n * @param child Any descendant bone of the parent. */\nspine.IkConstraint.apply2 = function (parent, child, targetX, targetY, bendDirection, alpha)\n{\n    var childRotation = child.rotation, parentRotation = parent.rotation;\n    if (!alpha)\n    {\n        child.rotationIK = childRotation;\n        parent.rotationIK = parentRotation;\n        return;\n    }\n    var positionX, positionY, tempPosition = spine.temp;\n    var parentParent = parent.parent;\n    if (parentParent)\n    {\n        tempPosition[0] = targetX;\n        tempPosition[1] = targetY;\n        parentParent.worldToLocal(tempPosition);\n        targetX = (tempPosition[0] - parent.x) * parentParent.worldScaleX;\n        targetY = (tempPosition[1] - parent.y) * parentParent.worldScaleY;\n    } else {\n        targetX -= parent.x;\n        targetY -= parent.y;\n    }\n    if (child.parent == parent)\n    {\n        positionX = child.x;\n        positionY = child.y;\n    } else {\n        tempPosition[0] = child.x;\n        tempPosition[1] = child.y;\n        child.parent.localToWorld(tempPosition);\n        parent.worldToLocal(tempPosition);\n        positionX = tempPosition[0];\n        positionY = tempPosition[1];\n    }\n    var childX = positionX * parent.worldScaleX, childY = positionY * parent.worldScaleY;\n    var offset = Math.atan2(childY, childX);\n    var len1 = Math.sqrt(childX * childX + childY * childY), len2 = child.data.length * child.worldScaleX;\n    // Based on code by Ryan Juckett with permission: Copyright (c) 2008-2009 Ryan Juckett, http://www.ryanjuckett.com/\n    var cosDenom = 2 * len1 * len2;\n    if (cosDenom < 0.0001)\n    {\n        child.rotationIK = childRotation + (Math.atan2(targetY, targetX) * spine.radDeg - parentRotation - childRotation) * alpha;\n        return;\n    }\n    var cos = (targetX * targetX + targetY * targetY - len1 * len1 - len2 * len2) / cosDenom;\n    if (cos < -1)\n        cos = -1;\n    else if (cos > 1)\n        cos = 1;\n    var childAngle = Math.acos(cos) * bendDirection;\n    var adjacent = len1 + len2 * cos, opposite = len2 * Math.sin(childAngle);\n    var parentAngle = Math.atan2(targetY * adjacent - targetX * opposite, targetX * adjacent + targetY * opposite);\n    var rotation = (parentAngle - offset) * spine.radDeg - parentRotation;\n    if (rotation > 180)\n        rotation -= 360;\n    else if (rotation < -180) //\n        rotation += 360;\n    parent.rotationIK = parentRotation + rotation * alpha;\n    rotation = (childAngle + offset) * spine.radDeg - childRotation;\n    if (rotation > 180)\n        rotation -= 360;\n    else if (rotation < -180) //\n        rotation += 360;\n    child.rotationIK = childRotation + (rotation + parent.worldRotation - child.parent.worldRotation) * alpha;\n};\nmodule.exports = spine.IkConstraint;\n\n","var spine = require('../SpineUtil') || {};\nspine.IkConstraintData = function (name)\n{\n    this.name = name;\n    this.bones = [];\n};\nspine.IkConstraintData.prototype = {\n    target: null,\n    bendDirection: 1,\n    mix: 1\n};\nmodule.exports = spine.IkConstraintData;\n\n","var spine = require('../SpineUtil') || {};\nspine.Animation = require('./Animation');\nspine.Curves = require('./Curves');\nspine.IkConstraintTimeline = function (frameCount)\n{\n    this.curves = new spine.Curves(frameCount);\n    this.frames = []; // time, mix, bendDirection, ...\n    this.frames.length = frameCount * 3;\n};\nspine.IkConstraintTimeline.prototype = {\n    ikConstraintIndex: 0,\n    getFrameCount: function ()\n    {\n        return this.frames.length / 3;\n    },\n    setFrame: function (frameIndex, time, mix, bendDirection)\n    {\n        frameIndex *= 3;\n        this.frames[frameIndex] = time;\n        this.frames[frameIndex + 1] = mix;\n        this.frames[frameIndex + 2] = bendDirection;\n    },\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\n    {\n        var frames = this.frames;\n        if (time < frames[0]) return; // Time is before first frame.\n\n        var ikConstraint = skeleton.ikConstraints[this.ikConstraintIndex];\n\n        if (time >= frames[frames.length - 3])\n        { // Time is after last frame.\n            ikConstraint.mix += (frames[frames.length - 2] - ikConstraint.mix) * alpha;\n            ikConstraint.bendDirection = frames[frames.length - 1];\n            return;\n        }\n\n        // Interpolate between the previous frame and the current frame.\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\n        var prevFrameMix = frames[frameIndex + -2/*PREV_FRAME_MIX*/];\n        var frameTime = frames[frameIndex];\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\n\n        var mix = prevFrameMix + (frames[frameIndex + 1/*FRAME_MIX*/] - prevFrameMix) * percent;\n        ikConstraint.mix += (mix - ikConstraint.mix) * alpha;\n        ikConstraint.bendDirection = frames[frameIndex + -1/*PREV_FRAME_BEND_DIRECTION*/];\n    }\n};\nmodule.exports = spine.IkConstraintTimeline;\n\n","var spine = require('../SpineUtil') || {};\nspine.AttachmentType = require('./AttachmentType');\nspine.MeshAttachment = function (name)\n{\n    this.name = name;\n};\nspine.MeshAttachment.prototype = {\n    type: spine.AttachmentType.mesh,\n    vertices: null,\n    uvs: null,\n    regionUVs: null,\n    triangles: null,\n    hullLength: 0,\n    r: 1, g: 1, b: 1, a: 1,\n    path: null,\n    rendererObject: null,\n    regionU: 0, regionV: 0, regionU2: 0, regionV2: 0, regionRotate: false,\n    regionOffsetX: 0, regionOffsetY: 0,\n    regionWidth: 0, regionHeight: 0,\n    regionOriginalWidth: 0, regionOriginalHeight: 0,\n    edges: null,\n    width: 0, height: 0,\n    updateUVs: function ()\n    {\n        var width = this.regionU2 - this.regionU, height = this.regionV2 - this.regionV;\n        var n = this.regionUVs.length;\n        if (!this.uvs || this.uvs.length != n)\n        {\n            this.uvs = new spine.Float32Array(n);\n        }\n        if (this.regionRotate)\n        {\n            for (var i = 0; i < n; i += 2)\n            {\n                this.uvs[i] = this.regionU + this.regionUVs[i + 1] * width;\n                this.uvs[i + 1] = this.regionV + height - this.regionUVs[i] * height;\n            }\n        } else {\n            for (var i = 0; i < n; i += 2)\n            {\n                this.uvs[i] = this.regionU + this.regionUVs[i] * width;\n                this.uvs[i + 1] = this.regionV + this.regionUVs[i + 1] * height;\n            }\n        }\n    },\n    computeWorldVertices: function (x, y, slot, worldVertices)\n    {\n        var bone = slot.bone;\n        x += bone.worldX;\n        y += bone.worldY;\n        var m00 = bone.m00, m01 = bone.m01, m10 = bone.m10, m11 = bone.m11;\n        var vertices = this.vertices;\n        var verticesCount = vertices.length;\n        if (slot.attachmentVertices.length == verticesCount) vertices = slot.attachmentVertices;\n        for (var i = 0; i < verticesCount; i += 2)\n        {\n            var vx = vertices[i];\n            var vy = vertices[i + 1];\n            worldVertices[i] = vx * m00 + vy * m01 + x;\n            worldVertices[i + 1] = vx * m10 + vy * m11 + y;\n        }\n    }\n};\nmodule.exports = spine.MeshAttachment;\n\n","var spine = require('../SpineUtil');\nspine.AttachmentType = require('./AttachmentType');\nspine.RegionAttachment = function (name)\n{\n    this.name = name;\n    this.offset = [];\n    this.offset.length = 8;\n    this.uvs = [];\n    this.uvs.length = 8;\n};\nspine.RegionAttachment.prototype = {\n    type: spine.AttachmentType.region,\n    x: 0, y: 0,\n    rotation: 0,\n    scaleX: 1, scaleY: 1,\n    width: 0, height: 0,\n    r: 1, g: 1, b: 1, a: 1,\n    path: null,\n    rendererObject: null,\n    regionOffsetX: 0, regionOffsetY: 0,\n    regionWidth: 0, regionHeight: 0,\n    regionOriginalWidth: 0, regionOriginalHeight: 0,\n    setUVs: function (u, v, u2, v2, rotate)\n    {\n        var uvs = this.uvs;\n        if (rotate)\n        {\n            uvs[2/*X2*/] = u;\n            uvs[3/*Y2*/] = v2;\n            uvs[4/*X3*/] = u;\n            uvs[5/*Y3*/] = v;\n            uvs[6/*X4*/] = u2;\n            uvs[7/*Y4*/] = v;\n            uvs[0/*X1*/] = u2;\n            uvs[1/*Y1*/] = v2;\n        } else {\n            uvs[0/*X1*/] = u;\n            uvs[1/*Y1*/] = v2;\n            uvs[2/*X2*/] = u;\n            uvs[3/*Y2*/] = v;\n            uvs[4/*X3*/] = u2;\n            uvs[5/*Y3*/] = v;\n            uvs[6/*X4*/] = u2;\n            uvs[7/*Y4*/] = v2;\n        }\n    },\n    updateOffset: function ()\n    {\n        var regionScaleX = this.width / this.regionOriginalWidth * this.scaleX;\n        var regionScaleY = this.height / this.regionOriginalHeight * this.scaleY;\n        var localX = -this.width / 2 * this.scaleX + this.regionOffsetX * regionScaleX;\n        var localY = -this.height / 2 * this.scaleY + this.regionOffsetY * regionScaleY;\n        var localX2 = localX + this.regionWidth * regionScaleX;\n        var localY2 = localY + this.regionHeight * regionScaleY;\n        var radians = this.rotation * spine.degRad;\n        var cos = Math.cos(radians);\n        var sin = Math.sin(radians);\n        var localXCos = localX * cos + this.x;\n        var localXSin = localX * sin;\n        var localYCos = localY * cos + this.y;\n        var localYSin = localY * sin;\n        var localX2Cos = localX2 * cos + this.x;\n        var localX2Sin = localX2 * sin;\n        var localY2Cos = localY2 * cos + this.y;\n        var localY2Sin = localY2 * sin;\n        var offset = this.offset;\n        offset[0/*X1*/] = localXCos - localYSin;\n        offset[1/*Y1*/] = localYCos + localXSin;\n        offset[2/*X2*/] = localXCos - localY2Sin;\n        offset[3/*Y2*/] = localY2Cos + localXSin;\n        offset[4/*X3*/] = localX2Cos - localY2Sin;\n        offset[5/*Y3*/] = localY2Cos + localX2Sin;\n        offset[6/*X4*/] = localX2Cos - localYSin;\n        offset[7/*Y4*/] = localYCos + localX2Sin;\n    },\n    computeVertices: function (x, y, bone, vertices)\n    {\n        x += bone.worldX;\n        y += bone.worldY;\n        var m00 = bone.m00, m01 = bone.m01, m10 = bone.m10, m11 = bone.m11;\n        var offset = this.offset;\n        vertices[0/*X1*/] = offset[0/*X1*/] * m00 + offset[1/*Y1*/] * m01 + x;\n        vertices[1/*Y1*/] = offset[0/*X1*/] * m10 + offset[1/*Y1*/] * m11 + y;\n        vertices[2/*X2*/] = offset[2/*X2*/] * m00 + offset[3/*Y2*/] * m01 + x;\n        vertices[3/*Y2*/] = offset[2/*X2*/] * m10 + offset[3/*Y2*/] * m11 + y;\n        vertices[4/*X3*/] = offset[4/*X3*/] * m00 + offset[5/*X3*/] * m01 + x;\n        vertices[5/*X3*/] = offset[4/*X3*/] * m10 + offset[5/*X3*/] * m11 + y;\n        vertices[6/*X4*/] = offset[6/*X4*/] * m00 + offset[7/*Y4*/] * m01 + x;\n        vertices[7/*Y4*/] = offset[6/*X4*/] * m10 + offset[7/*Y4*/] * m11 + y;\n    }\n};\nmodule.exports = spine.RegionAttachment;\n\n","var spine = require('../SpineUtil') || {};\nspine.Animation = require('./Animation');\nspine.Curves = require('./Curves');\nspine.RotateTimeline = function (frameCount)\n{\n    this.curves = new spine.Curves(frameCount);\n    this.frames = []; // time, angle, ...\n    this.frames.length = frameCount * 2;\n};\nspine.RotateTimeline.prototype = {\n    boneIndex: 0,\n    getFrameCount: function ()\n    {\n        return this.frames.length / 2;\n    },\n    setFrame: function (frameIndex, time, angle)\n    {\n        frameIndex *= 2;\n        this.frames[frameIndex] = time;\n        this.frames[frameIndex + 1] = angle;\n    },\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\n    {\n        var frames = this.frames;\n        if (time < frames[0]) return; // Time is before first frame.\n\n        var bone = skeleton.bones[this.boneIndex];\n\n        if (time >= frames[frames.length - 2])\n        { // Time is after last frame.\n            var amount = bone.data.rotation + frames[frames.length - 1] - bone.rotation;\n            while (amount > 180)\n                amount -= 360;\n            while (amount < -180)\n                amount += 360;\n            bone.rotation += amount * alpha;\n            return;\n        }\n\n        // Interpolate between the previous frame and the current frame.\n        var frameIndex = spine.Animation.binarySearch(frames, time, 2);\n        var prevFrameValue = frames[frameIndex - 1];\n        var frameTime = frames[frameIndex];\n        var percent = 1 - (time - frameTime) / (frames[frameIndex - 2/*PREV_FRAME_TIME*/] - frameTime);\n        percent = this.curves.getCurvePercent(frameIndex / 2 - 1, percent);\n\n        var amount = frames[frameIndex + 1/*FRAME_VALUE*/] - prevFrameValue;\n        while (amount > 180)\n            amount -= 360;\n        while (amount < -180)\n            amount += 360;\n        amount = bone.data.rotation + (prevFrameValue + amount * percent) - bone.rotation;\n        while (amount > 180)\n            amount -= 360;\n        while (amount < -180)\n            amount += 360;\n        bone.rotation += amount * alpha;\n    }\n};\nmodule.exports = spine.RotateTimeline;\n\n","var spine = require('../SpineUtil');\nspine.Animation = require('./Animation');\nspine.Curves = require('./Curves');\nspine.ScaleTimeline = function (frameCount)\n{\n    this.curves = new spine.Curves(frameCount);\n    this.frames = []; // time, x, y, ...\n    this.frames.length = frameCount * 3;\n};\nspine.ScaleTimeline.prototype = {\n    boneIndex: 0,\n    getFrameCount: function ()\n    {\n        return this.frames.length / 3;\n    },\n    setFrame: function (frameIndex, time, x, y)\n    {\n        frameIndex *= 3;\n        this.frames[frameIndex] = time;\n        this.frames[frameIndex + 1] = x;\n        this.frames[frameIndex + 2] = y;\n    },\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\n    {\n        var frames = this.frames;\n        if (time < frames[0]) return; // Time is before first frame.\n\n        var bone = skeleton.bones[this.boneIndex];\n\n        if (time >= frames[frames.length - 3])\n        { // Time is after last frame.\n            bone.scaleX += (bone.data.scaleX * frames[frames.length - 2] - bone.scaleX) * alpha;\n            bone.scaleY += (bone.data.scaleY * frames[frames.length - 1] - bone.scaleY) * alpha;\n            return;\n        }\n\n        // Interpolate between the previous frame and the current frame.\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\n        var prevFrameX = frames[frameIndex - 2];\n        var prevFrameY = frames[frameIndex - 1];\n        var frameTime = frames[frameIndex];\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\n\n        bone.scaleX += (bone.data.scaleX * (prevFrameX + (frames[frameIndex + 1/*FRAME_X*/] - prevFrameX) * percent) - bone.scaleX) * alpha;\n        bone.scaleY += (bone.data.scaleY * (prevFrameY + (frames[frameIndex + 2/*FRAME_Y*/] - prevFrameY) * percent) - bone.scaleY) * alpha;\n    }\n};\nmodule.exports = spine.ScaleTimeline;\n\n","var spine = require('../SpineUtil');\nspine.Bone = require('./Bone');\nspine.Slot = require('./Slot');\nspine.IkConstraint = require('./IkConstraint');\nspine.Skeleton = function (skeletonData)\n{\n    this.data = skeletonData;\n\n    this.bones = [];\n    for (var i = 0, n = skeletonData.bones.length; i < n; i++)\n    {\n        var boneData = skeletonData.bones[i];\n        var parent = !boneData.parent ? null : this.bones[skeletonData.bones.indexOf(boneData.parent)];\n        this.bones.push(new spine.Bone(boneData, this, parent));\n    }\n\n    this.slots = [];\n    this.drawOrder = [];\n    for (var i = 0, n = skeletonData.slots.length; i < n; i++)\n    {\n        var slotData = skeletonData.slots[i];\n        var bone = this.bones[skeletonData.bones.indexOf(slotData.boneData)];\n        var slot = new spine.Slot(slotData, bone);\n        this.slots.push(slot);\n        this.drawOrder.push(i);\n    }\n\n    this.ikConstraints = [];\n    for (var i = 0, n = skeletonData.ikConstraints.length; i < n; i++)\n        this.ikConstraints.push(new spine.IkConstraint(skeletonData.ikConstraints[i], this));\n\n    this.boneCache = [];\n    this.updateCache();\n};\nspine.Skeleton.prototype = {\n    x: 0, y: 0,\n    skin: null,\n    r: 1, g: 1, b: 1, a: 1,\n    time: 0,\n    flipX: false, flipY: false,\n    /** Caches information about bones and IK constraints. Must be called if bones or IK constraints are added or removed. */\n    updateCache: function ()\n    {\n        var ikConstraints = this.ikConstraints;\n        var ikConstraintsCount = ikConstraints.length;\n\n        var arrayCount = ikConstraintsCount + 1;\n        var boneCache = this.boneCache;\n        if (boneCache.length > arrayCount) boneCache.length = arrayCount;\n        for (var i = 0, n = boneCache.length; i < n; i++)\n            boneCache[i].length = 0;\n        while (boneCache.length < arrayCount)\n            boneCache[boneCache.length] = [];\n\n        var nonIkBones = boneCache[0];\n        var bones = this.bones;\n\n        outer:\n        for (var i = 0, n = bones.length; i < n; i++)\n        {\n            var bone = bones[i];\n            var current = bone;\n            do {\n                for (var ii = 0; ii < ikConstraintsCount; ii++)\n                {\n                    var ikConstraint = ikConstraints[ii];\n                    var parent = ikConstraint.bones[0];\n                    var child= ikConstraint.bones[ikConstraint.bones.length - 1];\n                    while (true)\n                    {\n                        if (current == child)\n                        {\n                            boneCache[ii].push(bone);\n                            boneCache[ii + 1].push(bone);\n                            continue outer;\n                        }\n                        if (child == parent) break;\n                        child = child.parent;\n                    }\n                }\n                current = current.parent;\n            } while (current);\n            nonIkBones[nonIkBones.length] = bone;\n        }\n    },\n    /** Updates the world transform for each bone. */\n    updateWorldTransform: function ()\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n        {\n            var bone = bones[i];\n            bone.rotationIK = bone.rotation;\n        }\n        var i = 0, last = this.boneCache.length - 1;\n        while (true)\n        {\n            var cacheBones = this.boneCache[i];\n            for (var ii = 0, nn = cacheBones.length; ii < nn; ii++)\n                cacheBones[ii].updateWorldTransform();\n            if (i == last) break;\n            this.ikConstraints[i].apply();\n            i++;\n        }\n    },\n    /** Sets the bones and slots to their setup pose values. */\n    setToSetupPose: function ()\n    {\n        this.setBonesToSetupPose();\n        this.setSlotsToSetupPose();\n    },\n    setBonesToSetupPose: function ()\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            bones[i].setToSetupPose();\n\n        var ikConstraints = this.ikConstraints;\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\n        {\n            var ikConstraint = ikConstraints[i];\n            ikConstraint.bendDirection = ikConstraint.data.bendDirection;\n            ikConstraint.mix = ikConstraint.data.mix;\n        }\n    },\n    setSlotsToSetupPose: function ()\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n        {\n            slots[i].setToSetupPose(i);\n        }\n\n        this.resetDrawOrder();\n    },\n    /** @return May return null. */\n    getRootBone: function ()\n    {\n        return this.bones.length ? this.bones[0] : null;\n    },\n    /** @return May be null. */\n    findBone: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].data.name == boneName) return bones[i];\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findBoneIndex: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].data.name == boneName) return i;\n        return -1;\n    },\n    /** @return May be null. */\n    findSlot: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n            if (slots[i].data.name == slotName) return slots[i];\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findSlotIndex: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n            if (slots[i].data.name == slotName) return i;\n        return -1;\n    },\n    setSkinByName: function (skinName)\n    {\n        var skin = this.data.findSkin(skinName);\n        if (!skin) throw \"Skin not found: \" + skinName;\n        this.setSkin(skin);\n    },\n    /** Sets the skin used to look up attachments before looking in the {@link SkeletonData#getDefaultSkin() default skin}.\n     * Attachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was\n     * no old skin, each slot's setup mode attachment is attached from the new skin.\n     * @param newSkin May be null. */\n    setSkin: function (newSkin)\n    {\n        if (newSkin)\n        {\n            if (this.skin)\n                newSkin._attachAll(this, this.skin);\n            else\n            {\n                var slots = this.slots;\n                for (var i = 0, n = slots.length; i < n; i++)\n                {\n                    var slot = slots[i];\n                    var name = slot.data.attachmentName;\n                    if (name)\n                    {\n                        var attachment = newSkin.getAttachment(i, name);\n                        if (attachment) slot.setAttachment(attachment);\n                    }\n                }\n            }\n        }\n        this.skin = newSkin;\n    },\n    /** @return May be null. */\n    getAttachmentBySlotName: function (slotName, attachmentName)\n    {\n        return this.getAttachmentBySlotIndex(this.data.findSlotIndex(slotName), attachmentName);\n    },\n    /** @return May be null. */\n    getAttachmentBySlotIndex: function (slotIndex, attachmentName)\n    {\n        if (this.skin)\n        {\n            var attachment = this.skin.getAttachment(slotIndex, attachmentName);\n            if (attachment) return attachment;\n        }\n        if (this.data.defaultSkin) return this.data.defaultSkin.getAttachment(slotIndex, attachmentName);\n        return null;\n    },\n    /** @param attachmentName May be null. */\n    setAttachment: function (slotName, attachmentName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n        {\n            var slot = slots[i];\n            if (slot.data.name == slotName)\n            {\n                var attachment = null;\n                if (attachmentName)\n                {\n                    attachment = this.getAttachmentBySlotIndex(i, attachmentName);\n                    if (!attachment) throw \"Attachment not found: \" + attachmentName + \", for slot: \" + slotName;\n                }\n                slot.setAttachment(attachment);\n                return;\n            }\n        }\n        throw \"Slot not found: \" + slotName;\n    },\n    /** @return May be null. */\n    findIkConstraint: function (ikConstraintName)\n    {\n        var ikConstraints = this.ikConstraints;\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\n            if (ikConstraints[i].data.name == ikConstraintName) return ikConstraints[i];\n        return null;\n    },\n    update: function (delta)\n    {\n        this.time += delta;\n    },\n    resetDrawOrder: function () {\n        for (var i = 0, n = this.drawOrder.length; i < n; i++)\n        {\n            this.drawOrder[i] = i;\n        }\n    }\n};\nmodule.exports = spine.Skeleton;\n\n","var spine = require('../SpineRuntime') || {};\nspine.AttachmentType = require('./AttachmentType');\nspine.SkeletonBounds = function ()\n{\n    this.polygonPool = [];\n    this.polygons = [];\n    this.boundingBoxes = [];\n};\nspine.SkeletonBounds.prototype = {\n    minX: 0, minY: 0, maxX: 0, maxY: 0,\n    update: function (skeleton, updateAabb)\n    {\n        var slots = skeleton.slots;\n        var slotCount = slots.length;\n        var x = skeleton.x, y = skeleton.y;\n        var boundingBoxes = this.boundingBoxes;\n        var polygonPool = this.polygonPool;\n        var polygons = this.polygons;\n\n        boundingBoxes.length = 0;\n        for (var i = 0, n = polygons.length; i < n; i++)\n            polygonPool.push(polygons[i]);\n        polygons.length = 0;\n\n        for (var i = 0; i < slotCount; i++)\n        {\n            var slot = slots[i];\n            var boundingBox = slot.attachment;\n            if (boundingBox.type != spine.AttachmentType.boundingbox) continue;\n            boundingBoxes.push(boundingBox);\n\n            var poolCount = polygonPool.length, polygon;\n            if (poolCount > 0)\n            {\n                polygon = polygonPool[poolCount - 1];\n                polygonPool.splice(poolCount - 1, 1);\n            } else\n                polygon = [];\n            polygons.push(polygon);\n\n            polygon.length = boundingBox.vertices.length;\n            boundingBox.computeWorldVertices(x, y, slot.bone, polygon);\n        }\n\n        if (updateAabb) this.aabbCompute();\n    },\n    aabbCompute: function ()\n    {\n        var polygons = this.polygons;\n        var minX = Number.MAX_VALUE, minY = Number.MAX_VALUE, maxX = Number.MIN_VALUE, maxY = Number.MIN_VALUE;\n        for (var i = 0, n = polygons.length; i < n; i++)\n        {\n            var vertices = polygons[i];\n            for (var ii = 0, nn = vertices.length; ii < nn; ii += 2)\n            {\n                var x = vertices[ii];\n                var y = vertices[ii + 1];\n                minX = Math.min(minX, x);\n                minY = Math.min(minY, y);\n                maxX = Math.max(maxX, x);\n                maxY = Math.max(maxY, y);\n            }\n        }\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    },\n    /** Returns true if the axis aligned bounding box contains the point. */\n    aabbContainsPoint: function (x, y)\n    {\n        return x >= this.minX && x <= this.maxX && y >= this.minY && y <= this.maxY;\n    },\n    /** Returns true if the axis aligned bounding box intersects the line segment. */\n    aabbIntersectsSegment: function (x1, y1, x2, y2)\n    {\n        var minX = this.minX, minY = this.minY, maxX = this.maxX, maxY = this.maxY;\n        if ((x1 <= minX && x2 <= minX) || (y1 <= minY && y2 <= minY) || (x1 >= maxX && x2 >= maxX) || (y1 >= maxY && y2 >= maxY))\n            return false;\n        var m = (y2 - y1) / (x2 - x1);\n        var y = m * (minX - x1) + y1;\n        if (y > minY && y < maxY) return true;\n        y = m * (maxX - x1) + y1;\n        if (y > minY && y < maxY) return true;\n        var x = (minY - y1) / m + x1;\n        if (x > minX && x < maxX) return true;\n        x = (maxY - y1) / m + x1;\n        if (x > minX && x < maxX) return true;\n        return false;\n    },\n    /** Returns true if the axis aligned bounding box intersects the axis aligned bounding box of the specified bounds. */\n    aabbIntersectsSkeleton: function (bounds)\n    {\n        return this.minX < bounds.maxX && this.maxX > bounds.minX && this.minY < bounds.maxY && this.maxY > bounds.minY;\n    },\n    /** Returns the first bounding box attachment that contains the point, or null. When doing many checks, it is usually more\n     * efficient to only call this method if {@link #aabbContainsPoint(float, float)} returns true. */\n    containsPoint: function (x, y)\n    {\n        var polygons = this.polygons;\n        for (var i = 0, n = polygons.length; i < n; i++)\n            if (this.polygonContainsPoint(polygons[i], x, y)) return this.boundingBoxes[i];\n        return null;\n    },\n    /** Returns the first bounding box attachment that contains the line segment, or null. When doing many checks, it is usually\n     * more efficient to only call this method if {@link #aabbIntersectsSegment(float, float, float, float)} returns true. */\n    intersectsSegment: function (x1, y1, x2, y2)\n    {\n        var polygons = this.polygons;\n        for (var i = 0, n = polygons.length; i < n; i++)\n            if (polygons[i].intersectsSegment(x1, y1, x2, y2)) return this.boundingBoxes[i];\n        return null;\n    },\n    /** Returns true if the polygon contains the point. */\n    polygonContainsPoint: function (polygon, x, y)\n    {\n        var nn = polygon.length;\n        var prevIndex = nn - 2;\n        var inside = false;\n        for (var ii = 0; ii < nn; ii += 2)\n        {\n            var vertexY = polygon[ii + 1];\n            var prevY = polygon[prevIndex + 1];\n            if ((vertexY < y && prevY >= y) || (prevY < y && vertexY >= y))\n            {\n                var vertexX = polygon[ii];\n                if (vertexX + (y - vertexY) / (prevY - vertexY) * (polygon[prevIndex] - vertexX) < x) inside = !inside;\n            }\n            prevIndex = ii;\n        }\n        return inside;\n    },\n    /** Returns true if the polygon contains the line segment. */\n    polygonIntersectsSegment: function (polygon, x1, y1, x2, y2)\n    {\n        var nn = polygon.length;\n        var width12 = x1 - x2, height12 = y1 - y2;\n        var det1 = x1 * y2 - y1 * x2;\n        var x3 = polygon[nn - 2], y3 = polygon[nn - 1];\n        for (var ii = 0; ii < nn; ii += 2)\n        {\n            var x4 = polygon[ii], y4 = polygon[ii + 1];\n            var det2 = x3 * y4 - y3 * x4;\n            var width34 = x3 - x4, height34 = y3 - y4;\n            var det3 = width12 * height34 - height12 * width34;\n            var x = (det1 * width34 - width12 * det2) / det3;\n            if (((x >= x3 && x <= x4) || (x >= x4 && x <= x3)) && ((x >= x1 && x <= x2) || (x >= x2 && x <= x1)))\n            {\n                var y = (det1 * height34 - height12 * det2) / det3;\n                if (((y >= y3 && y <= y4) || (y >= y4 && y <= y3)) && ((y >= y1 && y <= y2) || (y >= y2 && y <= y1))) return true;\n            }\n            x3 = x4;\n            y3 = y4;\n        }\n        return false;\n    },\n    getPolygon: function (attachment)\n    {\n        var index = this.boundingBoxes.indexOf(attachment);\n        return index == -1 ? null : this.polygons[index];\n    },\n    getWidth: function ()\n    {\n        return this.maxX - this.minX;\n    },\n    getHeight: function ()\n    {\n        return this.maxY - this.minY;\n    }\n};\nmodule.exports = spine.SkeletonBounds;\n\n","var spine = require('../SpineUtil');\nspine.SkeletonData = function ()\n{\n    this.bones = [];\n    this.slots = [];\n    this.skins = [];\n    this.events = [];\n    this.animations = [];\n    this.ikConstraints = [];\n};\nspine.SkeletonData.prototype = {\n    name: null,\n    defaultSkin: null,\n    width: 0, height: 0,\n    version: null, hash: null,\n    /** @return May be null. */\n    findBone: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].name == boneName) return bones[i];\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findBoneIndex: function (boneName)\n    {\n        var bones = this.bones;\n        for (var i = 0, n = bones.length; i < n; i++)\n            if (bones[i].name == boneName) return i;\n        return -1;\n    },\n    /** @return May be null. */\n    findSlot: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n        {\n            if (slots[i].name == slotName) return this.slots[i];\n        }\n        return null;\n    },\n    /** @return -1 if the bone was not found. */\n    findSlotIndex: function (slotName)\n    {\n        var slots = this.slots;\n        for (var i = 0, n = slots.length; i < n; i++)\n            if (slots[i].name == slotName) return i;\n        return -1;\n    },\n    /** @return May be null. */\n    findSkin: function (skinName)\n    {\n        var skins = this.skins;\n        for (var i = 0, n = skins.length; i < n; i++)\n            if (skins[i].name == skinName) return skins[i];\n        return null;\n    },\n    /** @return May be null. */\n    findEvent: function (eventName)\n    {\n        var events = this.events;\n        for (var i = 0, n = events.length; i < n; i++)\n            if (events[i].name == eventName) return events[i];\n        return null;\n    },\n    /** @return May be null. */\n    findAnimation: function (animationName)\n    {\n        var animations = this.animations;\n        for (var i = 0, n = animations.length; i < n; i++)\n            if (animations[i].name == animationName) return animations[i];\n        return null;\n    },\n    /** @return May be null. */\n    findIkConstraint: function (ikConstraintName)\n    {\n        var ikConstraints = this.ikConstraints;\n        for (var i = 0, n = ikConstraints.length; i < n; i++)\n            if (ikConstraints[i].name == ikConstraintName) return ikConstraints[i];\n        return null;\n    }\n};\nmodule.exports = spine.SkeletonData;\n\n","var spine = require('../SpineUtil');\nspine.SkeletonData = require('./SkeletonData');\nspine.BoneData = require('./BoneData');\nspine.IkConstraintData = require('./IkConstraintData');\nspine.SlotData = require('./SlotData');\nspine.Skin = require('./Skin');\nspine.EventData = require('./EventData');\nspine.AttachmentType = require('./AttachmentType');\nspine.ColorTimeline = require('./ColorTimeline');\nspine.AttachmentTimeline = require('./AttachmentTimeline');\nspine.RotateTimeline = require('./RotateTimeline');\nspine.ScaleTimeline = require('./ScaleTimeline');\nspine.TranslateTimeline = require('./TranslateTimeline');\nspine.FlipXTimeline = require('./FlipXTimeline');\nspine.FlipYTimeline = require('./FlipYTimeline');\nspine.IkConstraintTimeline = require('./IkConstraintTimeline');\nspine.FfdTimeline = require('./FfdTimeline');\nspine.DrawOrderTimeline = require('./DrawOrderTimeline');\nspine.EventTimeline = require('./EventTimeline');\nspine.Event = require('./Event');\nspine.Animation = require('./Animation');\nspine.SkeletonJsonParser = function (attachmentLoader)\n{\n    this.attachmentLoader = attachmentLoader;\n};\nspine.SkeletonJsonParser.prototype = {\n    scale: 1,\n    readSkeletonData: function (root, name)\n    {\n        var skeletonData = new spine.SkeletonData();\n        skeletonData.name = name;\n\n        // Skeleton.\n        var skeletonMap = root[\"skeleton\"];\n        if (skeletonMap)\n        {\n            skeletonData.hash = skeletonMap[\"hash\"];\n            skeletonData.version = skeletonMap[\"spine\"];\n            skeletonData.width = skeletonMap[\"width\"] || 0;\n            skeletonData.height = skeletonMap[\"height\"] || 0;\n        }\n\n        // Bones.\n        var bones = root[\"bones\"];\n        for (var i = 0, n = bones.length; i < n; i++)\n        {\n            var boneMap = bones[i];\n            var parent = null;\n            if (boneMap[\"parent\"])\n            {\n                parent = skeletonData.findBone(boneMap[\"parent\"]);\n                if (!parent) throw \"Parent bone not found: \" + boneMap[\"parent\"];\n            }\n            var boneData = new spine.BoneData(boneMap[\"name\"], parent);\n            boneData.length = (boneMap[\"length\"] || 0) * this.scale;\n            boneData.x = (boneMap[\"x\"] || 0) * this.scale;\n            boneData.y = (boneMap[\"y\"] || 0) * this.scale;\n            boneData.rotation = (boneMap[\"rotation\"] || 0);\n            boneData.scaleX = boneMap.hasOwnProperty(\"scaleX\") ? boneMap[\"scaleX\"] : 1;\n            boneData.scaleY = boneMap.hasOwnProperty(\"scaleY\") ? boneMap[\"scaleY\"] : 1;\n            boneData.inheritScale = boneMap.hasOwnProperty(\"inheritScale\") ? boneMap[\"inheritScale\"] : true;\n            boneData.inheritRotation = boneMap.hasOwnProperty(\"inheritRotation\") ? boneMap[\"inheritRotation\"] : true;\n            skeletonData.bones.push(boneData);\n        }\n\n        // IK constraints.\n        var ik = root[\"ik\"];\n        if (ik)\n        {\n            for (var i = 0, n = ik.length; i < n; i++)\n            {\n                var ikMap = ik[i];\n                var ikConstraintData = new spine.IkConstraintData(ikMap[\"name\"]);\n\n                var bones = ikMap[\"bones\"];\n                for (var ii = 0, nn = bones.length; ii < nn; ii++)\n                {\n                    var bone = skeletonData.findBone(bones[ii]);\n                    if (!bone) throw \"IK bone not found: \" + bones[ii];\n                    ikConstraintData.bones.push(bone);\n                }\n\n                ikConstraintData.target = skeletonData.findBone(ikMap[\"target\"]);\n                if (!ikConstraintData.target) throw \"Target bone not found: \" + ikMap[\"target\"];\n\n                ikConstraintData.bendDirection = (!ikMap.hasOwnProperty(\"bendPositive\") || ikMap[\"bendPositive\"]) ? 1 : -1;\n                ikConstraintData.mix = ikMap.hasOwnProperty(\"mix\") ? ikMap[\"mix\"] : 1;\n\n                skeletonData.ikConstraints.push(ikConstraintData);\n            }\n        }\n\n        // Slots.\n        var slots = root[\"slots\"];\n        for (var i = 0, n = slots.length; i < n; i++)\n        {\n            var slotMap = slots[i];\n            var boneData = skeletonData.findBone(slotMap[\"bone\"]);\n            if (!boneData) throw \"Slot bone not found: \" + slotMap[\"bone\"];\n            var slotData = new spine.SlotData(slotMap[\"name\"], boneData);\n\n            var color = slotMap[\"color\"];\n            if (color)\n            {\n                slotData.r = this.toColor(color, 0);\n                slotData.g = this.toColor(color, 1);\n                slotData.b = this.toColor(color, 2);\n                slotData.a = this.toColor(color, 3);\n            }\n\n            slotData.attachmentName = slotMap[\"attachment\"];\n\n\n            slotData.blendMode = slotMap[\"blend\"] && spine.SlotData.PIXI_BLEND_MODE_MAP[slotMap[\"blend\"]] || spine.SlotData.PIXI_BLEND_MODE_MAP['normal'];\n\n            skeletonData.slots.push(slotData);\n        }\n\n        // Skins.\n        var skins = root[\"skins\"];\n        for (var skinName in skins)\n        {\n            if (!skins.hasOwnProperty(skinName)) continue;\n            var skinMap = skins[skinName];\n            var skin = new spine.Skin(skinName);\n            for (var slotName in skinMap)\n            {\n                if (!skinMap.hasOwnProperty(slotName)) continue;\n                var slotIndex = skeletonData.findSlotIndex(slotName);\n                var slotEntry = skinMap[slotName];\n                for (var attachmentName in slotEntry)\n                {\n                    if (!slotEntry.hasOwnProperty(attachmentName)) continue;\n                    var attachment = this.readAttachment(skin, attachmentName, slotEntry[attachmentName]);\n                    if (attachment) skin.addAttachment(slotIndex, attachmentName, attachment);\n                }\n            }\n            skeletonData.skins.push(skin);\n            if (skin.name == \"default\") skeletonData.defaultSkin = skin;\n        }\n\n        // Events.\n        var events = root[\"events\"];\n        for (var eventName in events)\n        {\n            if (!events.hasOwnProperty(eventName)) continue;\n            var eventMap = events[eventName];\n            var eventData = new spine.EventData(eventName);\n            eventData.intValue = eventMap[\"int\"] || 0;\n            eventData.floatValue = eventMap[\"float\"] || 0;\n            eventData.stringValue = eventMap[\"string\"] || null;\n            skeletonData.events.push(eventData);\n        }\n\n        // Animations.\n        var animations = root[\"animations\"];\n        for (var animationName in animations)\n        {\n            if (!animations.hasOwnProperty(animationName)) continue;\n            this.readAnimation(animationName, animations[animationName], skeletonData);\n        }\n\n        return skeletonData;\n    },\n    readAttachment: function (skin, name, map)\n    {\n        name = map[\"name\"] || name;\n\n        var type = spine.AttachmentType[map[\"type\"] || \"region\"];\n        var path = map[\"path\"] || name;\n\n        var scale = this.scale;\n        if (type == spine.AttachmentType.region)\n        {\n            var region = this.attachmentLoader.newRegionAttachment(skin, name, path);\n            if (!region) return null;\n            region.path = path;\n            region.x = (map[\"x\"] || 0) * scale;\n            region.y = (map[\"y\"] || 0) * scale;\n            region.scaleX = map.hasOwnProperty(\"scaleX\") ? map[\"scaleX\"] : 1;\n            region.scaleY = map.hasOwnProperty(\"scaleY\") ? map[\"scaleY\"] : 1;\n            region.rotation = map[\"rotation\"] || 0;\n            region.width = (map[\"width\"] || 0) * scale;\n            region.height = (map[\"height\"] || 0) * scale;\n\n            var color = map[\"color\"];\n            if (color)\n            {\n                region.r = this.toColor(color, 0);\n                region.g = this.toColor(color, 1);\n                region.b = this.toColor(color, 2);\n                region.a = this.toColor(color, 3);\n            }\n\n            region.updateOffset();\n            return region;\n        } else if (type == spine.AttachmentType.mesh)\n        {\n            var mesh = this.attachmentLoader.newMeshAttachment(skin, name, path);\n            if (!mesh) return null;\n            mesh.path = path;\n            mesh.vertices = this.getFloatArray(map, \"vertices\", scale);\n            mesh.triangles = this.getIntArray(map, \"triangles\");\n            mesh.regionUVs = this.getFloatArray(map, \"uvs\", 1);\n            mesh.updateUVs();\n\n            color = map[\"color\"];\n            if (color)\n            {\n                mesh.r = this.toColor(color, 0);\n                mesh.g = this.toColor(color, 1);\n                mesh.b = this.toColor(color, 2);\n                mesh.a = this.toColor(color, 3);\n            }\n\n            mesh.hullLength = (map[\"hull\"] || 0) * 2;\n            if (map[\"edges\"]) mesh.edges = this.getIntArray(map, \"edges\");\n            mesh.width = (map[\"width\"] || 0) * scale;\n            mesh.height = (map[\"height\"] || 0) * scale;\n            return mesh;\n        } else if (type == spine.AttachmentType.skinnedmesh)\n        {\n            var mesh = this.attachmentLoader.newSkinnedMeshAttachment(skin, name, path);\n            if (!mesh) return null;\n            mesh.path = path;\n\n            var uvs = this.getFloatArray(map, \"uvs\", 1);\n            var vertices = this.getFloatArray(map, \"vertices\", 1);\n            var weights = [];\n            var bones = [];\n            for (var i = 0, n = vertices.length; i < n; )\n            {\n                var boneCount = vertices[i++] | 0;\n                bones[bones.length] = boneCount;\n                for (var nn = i + boneCount * 4; i < nn; )\n                {\n                    bones[bones.length] = vertices[i];\n                    weights[weights.length] = vertices[i + 1] * scale;\n                    weights[weights.length] = vertices[i + 2] * scale;\n                    weights[weights.length] = vertices[i + 3];\n                    i += 4;\n                }\n            }\n            mesh.bones = bones;\n            mesh.weights = weights;\n            mesh.triangles = this.getIntArray(map, \"triangles\");\n            mesh.regionUVs = uvs;\n            mesh.updateUVs();\n\n            color = map[\"color\"];\n            if (color)\n            {\n                mesh.r = this.toColor(color, 0);\n                mesh.g = this.toColor(color, 1);\n                mesh.b = this.toColor(color, 2);\n                mesh.a = this.toColor(color, 3);\n            }\n\n            mesh.hullLength = (map[\"hull\"] || 0) * 2;\n            if (map[\"edges\"]) mesh.edges = this.getIntArray(map, \"edges\");\n            mesh.width = (map[\"width\"] || 0) * scale;\n            mesh.height = (map[\"height\"] || 0) * scale;\n            return mesh;\n        } else if (type == spine.AttachmentType.boundingbox)\n        {\n            var attachment = this.attachmentLoader.newBoundingBoxAttachment(skin, name);\n            var vertices = map[\"vertices\"];\n            for (var i = 0, n = vertices.length; i < n; i++)\n                attachment.vertices.push(vertices[i] * scale);\n            return attachment;\n        }\n        throw \"Unknown attachment type: \" + type;\n    },\n    readAnimation: function (name, map, skeletonData)\n    {\n        var timelines = [];\n        var duration = 0;\n\n        var slots = map[\"slots\"];\n        for (var slotName in slots)\n        {\n            if (!slots.hasOwnProperty(slotName)) continue;\n            var slotMap = slots[slotName];\n            var slotIndex = skeletonData.findSlotIndex(slotName);\n\n            for (var timelineName in slotMap)\n            {\n                if (!slotMap.hasOwnProperty(timelineName)) continue;\n                var values = slotMap[timelineName];\n                if (timelineName == \"color\")\n                {\n                    var timeline = new spine.ColorTimeline(values.length);\n                    timeline.slotIndex = slotIndex;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        var color = valueMap[\"color\"];\n                        var r = this.toColor(color, 0);\n                        var g = this.toColor(color, 1);\n                        var b = this.toColor(color, 2);\n                        var a = this.toColor(color, 3);\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], r, g, b, a);\n                        this.readCurve(timeline, frameIndex, valueMap);\n                        frameIndex++;\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 5 - 5]);\n\n                } else if (timelineName == \"attachment\")\n                {\n                    var timeline = new spine.AttachmentTimeline(values.length);\n                    timeline.slotIndex = slotIndex;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        timeline.setFrame(frameIndex++, valueMap[\"time\"], valueMap[\"name\"]);\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n\n                } else\n                    throw \"Invalid timeline type for a slot: \" + timelineName + \" (\" + slotName + \")\";\n            }\n        }\n\n        var bones = map[\"bones\"];\n        for (var boneName in bones)\n        {\n            if (!bones.hasOwnProperty(boneName)) continue;\n            var boneIndex = skeletonData.findBoneIndex(boneName);\n            if (boneIndex == -1) throw \"Bone not found: \" + boneName;\n            var boneMap = bones[boneName];\n\n            for (var timelineName in boneMap)\n            {\n                if (!boneMap.hasOwnProperty(timelineName)) continue;\n                var values = boneMap[timelineName];\n                if (timelineName == \"rotate\")\n                {\n                    var timeline = new spine.RotateTimeline(values.length);\n                    timeline.boneIndex = boneIndex;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], valueMap[\"angle\"]);\n                        this.readCurve(timeline, frameIndex, valueMap);\n                        frameIndex++;\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 2 - 2]);\n\n                } else if (timelineName == \"translate\" || timelineName == \"scale\")\n                {\n                    var timeline;\n                    var timelineScale = 1;\n                    if (timelineName == \"scale\")\n                        timeline = new spine.ScaleTimeline(values.length);\n                    else\n                    {\n                        timeline = new spine.TranslateTimeline(values.length);\n                        timelineScale = this.scale;\n                    }\n                    timeline.boneIndex = boneIndex;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        var x = (valueMap[\"x\"] || 0) * timelineScale;\n                        var y = (valueMap[\"y\"] || 0) * timelineScale;\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], x, y);\n                        this.readCurve(timeline, frameIndex, valueMap);\n                        frameIndex++;\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 3 - 3]);\n\n                } else if (timelineName == \"flipX\" || timelineName == \"flipY\")\n                {\n                    var x = timelineName == \"flipX\";\n                    var timeline = x ? new spine.FlipXTimeline(values.length) : new spine.FlipYTimeline(values.length);\n                    timeline.boneIndex = boneIndex;\n\n                    var field = x ? \"x\" : \"y\";\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], valueMap[field] || false);\n                        frameIndex++;\n                    }\n                    timelines.push(timeline);\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 2 - 2]);\n                } else\n                    throw \"Invalid timeline type for a bone: \" + timelineName + \" (\" + boneName + \")\";\n            }\n        }\n\n        var ikMap = map[\"ik\"];\n        for (var ikConstraintName in ikMap)\n        {\n            if (!ikMap.hasOwnProperty(ikConstraintName)) continue;\n            var ikConstraint = skeletonData.findIkConstraint(ikConstraintName);\n            var values = ikMap[ikConstraintName];\n            var timeline = new spine.IkConstraintTimeline(values.length);\n            timeline.ikConstraintIndex = skeletonData.ikConstraints.indexOf(ikConstraint);\n            var frameIndex = 0;\n            for (var i = 0, n = values.length; i < n; i++)\n            {\n                var valueMap = values[i];\n                var mix = valueMap.hasOwnProperty(\"mix\") ? valueMap[\"mix\"] : 1;\n                var bendDirection = (!valueMap.hasOwnProperty(\"bendPositive\") || valueMap[\"bendPositive\"]) ? 1 : -1;\n                timeline.setFrame(frameIndex, valueMap[\"time\"], mix, bendDirection);\n                this.readCurve(timeline, frameIndex, valueMap);\n                frameIndex++;\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() * 3 - 3]);\n        }\n\n        var ffd = map[\"ffd\"];\n        for (var skinName in ffd)\n        {\n            var skin = skeletonData.findSkin(skinName);\n            var slotMap = ffd[skinName];\n            for (slotName in slotMap)\n            {\n                var slotIndex = skeletonData.findSlotIndex(slotName);\n                var meshMap = slotMap[slotName];\n                for (var meshName in meshMap)\n                {\n                    var values = meshMap[meshName];\n                    var timeline = new spine.FfdTimeline(values.length);\n                    var attachment = skin.getAttachment(slotIndex, meshName);\n                    if (!attachment) throw \"FFD attachment not found: \" + meshName;\n                    timeline.slotIndex = slotIndex;\n                    timeline.attachment = attachment;\n\n                    var isMesh = attachment.type == spine.AttachmentType.mesh;\n                    var vertexCount;\n                    if (isMesh)\n                        vertexCount = attachment.vertices.length;\n                    else\n                        vertexCount = attachment.weights.length / 3 * 2;\n\n                    var frameIndex = 0;\n                    for (var i = 0, n = values.length; i < n; i++)\n                    {\n                        var valueMap = values[i];\n                        var vertices;\n                        if (!valueMap[\"vertices\"])\n                        {\n                            if (isMesh)\n                                vertices = attachment.vertices;\n                            else\n                            {\n                                vertices = [];\n                                vertices.length = vertexCount;\n                            }\n                        } else {\n                            var verticesValue = valueMap[\"vertices\"];\n                            var vertices = [];\n                            for(var j = 0; j < vertexCount; ++j)vertices[j] = 0; //initialize to 0\n                            var start = valueMap[\"offset\"] || 0;\n                            var nn = verticesValue.length;\n                            if (this.scale == 1)\n                            {\n                                for (var ii = 0; ii < nn; ii++)\n                                    vertices[ii + start] = verticesValue[ii];\n                            } else {\n                                for (var ii = 0; ii < nn; ii++)\n                                    vertices[ii + start] = verticesValue[ii] * this.scale;\n                            }\n                            if (isMesh)\n                            {\n                                var meshVertices = attachment.vertices;\n                                for (var ii = 0, nn = vertices.length; ii < nn; ii++)\n                                    vertices[ii] += meshVertices[ii];\n                            }\n                        }\n\n                        timeline.setFrame(frameIndex, valueMap[\"time\"], vertices);\n                        this.readCurve(timeline, frameIndex, valueMap);\n                        frameIndex++;\n                    }\n                    timelines[timelines.length] = timeline;\n                    duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n                }\n            }\n        }\n\n        var drawOrderValues = map[\"drawOrder\"];\n        if (!drawOrderValues) drawOrderValues = map[\"draworder\"];\n        if (drawOrderValues)\n        {\n            var timeline = new spine.DrawOrderTimeline(drawOrderValues.length);\n            var slotCount = skeletonData.slots.length;\n            var frameIndex = 0;\n            for (var i = 0, n = drawOrderValues.length; i < n; i++)\n            {\n                var drawOrderMap = drawOrderValues[i];\n                var drawOrder = null;\n                if (drawOrderMap[\"offsets\"])\n                {\n                    drawOrder = [];\n                    drawOrder.length = slotCount;\n                    for (var ii = slotCount - 1; ii >= 0; ii--)\n                        drawOrder[ii] = -1;\n                    var offsets = drawOrderMap[\"offsets\"];\n                    var unchanged = [];\n                    unchanged.length = slotCount - offsets.length;\n                    var originalIndex = 0, unchangedIndex = 0;\n                    for (var ii = 0, nn = offsets.length; ii < nn; ii++)\n                    {\n                        var offsetMap = offsets[ii];\n                        var slotIndex = skeletonData.findSlotIndex(offsetMap[\"slot\"]);\n                        if (slotIndex == -1) throw \"Slot not found: \" + offsetMap[\"slot\"];\n                        // Collect unchanged items.\n                        while (originalIndex != slotIndex)\n                            unchanged[unchangedIndex++] = originalIndex++;\n                        // Set changed items.\n                        drawOrder[originalIndex + offsetMap[\"offset\"]] = originalIndex++;\n                    }\n                    // Collect remaining unchanged items.\n                    while (originalIndex < slotCount)\n                        unchanged[unchangedIndex++] = originalIndex++;\n                    // Fill in unchanged items.\n                    for (var ii = slotCount - 1; ii >= 0; ii--)\n                        if (drawOrder[ii] == -1) drawOrder[ii] = unchanged[--unchangedIndex];\n                }\n                timeline.setFrame(frameIndex++, drawOrderMap[\"time\"], drawOrder);\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n        }\n\n        var events = map[\"events\"];\n        if (events)\n        {\n            var timeline = new spine.EventTimeline(events.length);\n            var frameIndex = 0;\n            for (var i = 0, n = events.length; i < n; i++)\n            {\n                var eventMap = events[i];\n                var eventData = skeletonData.findEvent(eventMap[\"name\"]);\n                if (!eventData) throw \"Event not found: \" + eventMap[\"name\"];\n                var event = new spine.Event(eventData);\n                event.intValue = eventMap.hasOwnProperty(\"int\") ? eventMap[\"int\"] : eventData.intValue;\n                event.floatValue = eventMap.hasOwnProperty(\"float\") ? eventMap[\"float\"] : eventData.floatValue;\n                event.stringValue = eventMap.hasOwnProperty(\"string\") ? eventMap[\"string\"] : eventData.stringValue;\n                timeline.setFrame(frameIndex++, eventMap[\"time\"], event);\n            }\n            timelines.push(timeline);\n            duration = Math.max(duration, timeline.frames[timeline.getFrameCount() - 1]);\n        }\n\n        skeletonData.animations.push(new spine.Animation(name, timelines, duration));\n    },\n    readCurve: function (timeline, frameIndex, valueMap)\n    {\n        var curve = valueMap[\"curve\"];\n        if (!curve)\n            timeline.curves.setLinear(frameIndex);\n        else if (curve == \"stepped\")\n            timeline.curves.setStepped(frameIndex);\n        else if (curve instanceof Array)\n            timeline.curves.setCurve(frameIndex, curve[0], curve[1], curve[2], curve[3]);\n    },\n    toColor: function (hexString, colorIndex)\n    {\n        if (hexString.length != 8) throw \"Color hexidecimal length must be 8, recieved: \" + hexString;\n        return parseInt(hexString.substring(colorIndex * 2, (colorIndex * 2) + 2), 16) / 255;\n    },\n    getFloatArray: function (map, name, scale)\n    {\n        var list = map[name];\n        var values = new spine.Float32Array(list.length);\n        var i = 0, n = list.length;\n        if (scale == 1)\n        {\n            for (; i < n; i++)\n                values[i] = list[i];\n        } else {\n            for (; i < n; i++)\n                values[i] = list[i] * scale;\n        }\n        return values;\n    },\n    getIntArray: function (map, name)\n    {\n        var list = map[name];\n        var values = new spine.Uint16Array(list.length);\n        for (var i = 0, n = list.length; i < n; i++)\n            values[i] = list[i] | 0;\n        return values;\n    }\n};\nmodule.exports = spine.SkeletonJsonParser;\n\n","var spine = require('../SpineUtil');\nspine.Skin = function (name)\n{\n    this.name = name;\n    this.attachments = {};\n};\nspine.Skin.prototype = {\n    addAttachment: function (slotIndex, name, attachment)\n    {\n        this.attachments[slotIndex + \":\" + name] = attachment;\n    },\n    getAttachment: function (slotIndex, name)\n    {\n        return this.attachments[slotIndex + \":\" + name];\n    },\n    _attachAll: function (skeleton, oldSkin)\n    {\n        for (var key in oldSkin.attachments)\n        {\n            var colon = key.indexOf(\":\");\n            var slotIndex = parseInt(key.substring(0, colon));\n            var name = key.substring(colon + 1);\n            var slot = skeleton.slots[slotIndex];\n            if (slot.attachment && slot.attachment.name == name)\n            {\n                var attachment = this.getAttachment(slotIndex, name);\n                if (attachment) slot.setAttachment(attachment);\n            }\n        }\n    }\n};\nmodule.exports = spine.Skin;\n\n","var spine = require('../SpineUtil') || {};\nspine.AttachmentType = require('./AttachmentType');\nspine.SkinnedMeshAttachment = function (name)\n{\n    this.name = name;\n};\nspine.SkinnedMeshAttachment.prototype = {\n    type: spine.AttachmentType.skinnedmesh,\n    bones: null,\n    weights: null,\n    uvs: null,\n    regionUVs: null,\n    triangles: null,\n    hullLength: 0,\n    r: 1, g: 1, b: 1, a: 1,\n    path: null,\n    rendererObject: null,\n    regionU: 0, regionV: 0, regionU2: 0, regionV2: 0, regionRotate: false,\n    regionOffsetX: 0, regionOffsetY: 0,\n    regionWidth: 0, regionHeight: 0,\n    regionOriginalWidth: 0, regionOriginalHeight: 0,\n    edges: null,\n    width: 0, height: 0,\n    updateUVs: function (u, v, u2, v2, rotate)\n    {\n        var width = this.regionU2 - this.regionU, height = this.regionV2 - this.regionV;\n        var n = this.regionUVs.length;\n        if (!this.uvs || this.uvs.length != n)\n        {\n            this.uvs = new spine.Float32Array(n);\n        }\n        if (this.regionRotate)\n        {\n            for (var i = 0; i < n; i += 2)\n            {\n                this.uvs[i] = this.regionU + this.regionUVs[i + 1] * width;\n                this.uvs[i + 1] = this.regionV + height - this.regionUVs[i] * height;\n            }\n        } else {\n            for (var i = 0; i < n; i += 2)\n            {\n                this.uvs[i] = this.regionU + this.regionUVs[i] * width;\n                this.uvs[i + 1] = this.regionV + this.regionUVs[i + 1] * height;\n            }\n        }\n    },\n    computeWorldVertices: function (x, y, slot, worldVertices)\n    {\n        var skeletonBones = slot.bone.skeleton.bones;\n        var weights = this.weights;\n        var bones = this.bones;\n\n        var w = 0, v = 0, b = 0, f = 0, n = bones.length, nn;\n        var wx, wy, bone, vx, vy, weight;\n        if (!slot.attachmentVertices.length)\n        {\n            for (; v < n; w += 2)\n            {\n                wx = 0;\n                wy = 0;\n                nn = bones[v++] + v;\n                for (; v < nn; v++, b += 3)\n                {\n                    bone = skeletonBones[bones[v]];\n                    vx = weights[b];\n                    vy = weights[b + 1];\n                    weight = weights[b + 2];\n                    wx += (vx * bone.m00 + vy * bone.m01 + bone.worldX) * weight;\n                    wy += (vx * bone.m10 + vy * bone.m11 + bone.worldY) * weight;\n                }\n                worldVertices[w] = wx + x;\n                worldVertices[w + 1] = wy + y;\n            }\n        } else {\n            var ffd = slot.attachmentVertices;\n            for (; v < n; w += 2)\n            {\n                wx = 0;\n                wy = 0;\n                nn = bones[v++] + v;\n                for (; v < nn; v++, b += 3, f += 2)\n                {\n                    bone = skeletonBones[bones[v]];\n                    vx = weights[b] + ffd[f];\n                    vy = weights[b + 1] + ffd[f + 1];\n                    weight = weights[b + 2];\n                    wx += (vx * bone.m00 + vy * bone.m01 + bone.worldX) * weight;\n                    wy += (vx * bone.m10 + vy * bone.m11 + bone.worldY) * weight;\n                }\n                worldVertices[w] = wx + x;\n                worldVertices[w + 1] = wy + y;\n            }\n        }\n    }\n};\nmodule.exports = spine.SkinnedMeshAttachment;\n\n","var spine = require('../SpineUtil');\nspine.Slot = function (slotData, bone)\n{\n    this.data = slotData;\n    this.bone = bone;\n    this.setToSetupPose();\n};\nspine.Slot.prototype = {\n    r: 1, g: 1, b: 1, a: 1,\n    _attachmentTime: 0,\n    attachment: null,\n    attachmentVertices: [],\n    setAttachment: function (attachment)\n    {\n        this.attachment = attachment;\n        this._attachmentTime = this.bone.skeleton.time;\n        this.attachmentVertices.length = 0;\n    },\n    setAttachmentTime: function (time)\n    {\n        this._attachmentTime = this.bone.skeleton.time - time;\n    },\n    getAttachmentTime: function ()\n    {\n        return this.bone.skeleton.time - this._attachmentTime;\n    },\n    setToSetupPose: function ()\n    {\n        var data = this.data;\n        this.r = data.r;\n        this.g = data.g;\n        this.b = data.b;\n        this.a = data.a;\n        this.blendMode = data.blendMode;\n\n        var slotDatas = this.bone.skeleton.data.slots;\n        for (var i = 0, n = slotDatas.length; i < n; i++)\n        {\n            if (slotDatas[i] == data)\n            {\n                this.setAttachment(!data.attachmentName ? null : this.bone.skeleton.getAttachmentBySlotIndex(i, data.attachmentName));\n                break;\n            }\n        }\n    }\n};\nmodule.exports = spine.Slot;\n\n","var spine = require('../SpineUtil');\nspine.SlotData = function (name, boneData)\n{\n    this.name = name;\n    this.boneData = boneData;\n};\n\nspine.SlotData.PIXI_BLEND_MODE_MAP = {\n    'multiply': PIXI.blendModes.MULTIPLY,\n    'screen': PIXI.blendModes.SCREEN,\n    'additive': PIXI.blendModes.ADD,\n    'normal': PIXI.blendModes.NORMAL\n};\n\nspine.SlotData.prototype = {\n    r: 1, g: 1, b: 1, a: 1,\n    attachmentName: null,\n    blendMode: PIXI.blendModes.NORMAL\n\n\n};\n\n\nmodule.exports = spine.SlotData;\n\n","var spine = require('../SpineUtil');\nspine.TrackEntry = function ()\n{};\nspine.TrackEntry.prototype = {\n    next: null, previous: null,\n    animation: null,\n    loop: false,\n    delay: 0, time: 0, lastTime: -1, endTime: 0,\n    timeScale: 1,\n    mixTime: 0, mixDuration: 0, mix: 1,\n    onStart: null, onEnd: null, onComplete: null, onEvent: null\n};\nmodule.exports = spine.TrackEntry;\n\n","var spine = require('../SpineUtil');\nspine.Animation = require('./Animation');\nspine.Curves = require('./Curves');\nspine.TranslateTimeline = function (frameCount)\n{\n    this.curves = new spine.Curves(frameCount);\n    this.frames = []; // time, x, y, ...\n    this.frames.length = frameCount * 3;\n};\nspine.TranslateTimeline.prototype = {\n    boneIndex: 0,\n    getFrameCount: function ()\n    {\n        return this.frames.length / 3;\n    },\n    setFrame: function (frameIndex, time, x, y)\n    {\n        frameIndex *= 3;\n        this.frames[frameIndex] = time;\n        this.frames[frameIndex + 1] = x;\n        this.frames[frameIndex + 2] = y;\n    },\n    apply: function (skeleton, lastTime, time, firedEvents, alpha)\n    {\n        var frames = this.frames;\n        if (time < frames[0]) return; // Time is before first frame.\n\n        var bone = skeleton.bones[this.boneIndex];\n\n        if (time >= frames[frames.length - 3])\n        { // Time is after last frame.\n            bone.x += (bone.data.x + frames[frames.length - 2] - bone.x) * alpha;\n            bone.y += (bone.data.y + frames[frames.length - 1] - bone.y) * alpha;\n            return;\n        }\n\n        // Interpolate between the previous frame and the current frame.\n        var frameIndex = spine.Animation.binarySearch(frames, time, 3);\n        var prevFrameX = frames[frameIndex - 2];\n        var prevFrameY = frames[frameIndex - 1];\n        var frameTime = frames[frameIndex];\n        var percent = 1 - (time - frameTime) / (frames[frameIndex + -3/*PREV_FRAME_TIME*/] - frameTime);\n        percent = this.curves.getCurvePercent(frameIndex / 3 - 1, percent);\n\n        bone.x += (bone.data.x + prevFrameX + (frames[frameIndex + 1/*FRAME_X*/] - prevFrameX) * percent - bone.x) * alpha;\n        bone.y += (bone.data.y + prevFrameY + (frames[frameIndex + 2/*FRAME_Y*/] - prevFrameY) * percent - bone.y) * alpha;\n    }\n};\nmodule.exports = spine.TranslateTimeline;\n\n","/******************************************************************************\n * Spine Runtimes Software License\n * Version 2.1\n *\n * Copyright (c) 2013, Esoteric Software\n * All rights reserved.\n *\n * You are granted a perpetual, non-exclusive, non-sublicensable and\n * non-transferable license to install, execute and perform the Spine Runtimes\n * Software (the \"Software\") solely for internal use. Without the written\n * permission of Esoteric Software (typically granted by licensing Spine), you\n * may not (a) modify, translate, adapt or otherwise create derivative works,\n * improvements of the Software or develop new applications using the Software\n * or (b) remove, delete, alter or obscure any trademarks or any copyright,\n * trademark, patent or other intellectual property or proprietary rights\n * notices on or in the Software, including any copy thereof. Redistributions\n * in binary or source form must include this license and terms.\n *\n * THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n * EVENT SHALL ESOTERIC SOFTARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n *****************************************************************************/\nvar spine = require('../SpineUtil');\nspine.Animation = require('./Animation');\nspine.AnimationStateData = require('./AnimationStateData');\nspine.AnimationState = require('./AnimationState');\nspine.AtlasAttachmentParser = require('./AtlasAttachmentParser');\nspine.Atlas = require('./Atlas');\nspine.AtlasPage = require('./AtlasPage');\nspine.AtlasReader = require('./AtlasReader');\nspine.AtlasRegion = require('./AtlasRegion');\nspine.AttachmentTimeline = require('./AttachmentTimeline');\nspine.AttachmentType = require('./AttachmentType');\nspine.BoneData = require('./BoneData');\nspine.Bone = require('./Bone');\nspine.BoundingBoxAttachment = require('./BoundingBoxAttachment');\nspine.ColorTimeline = require('./ColorTimeline');\nspine.Curves = require('./Curves');\nspine.DrawOrderTimeline = require('./DrawOrderTimeline');\nspine.EventData = require('./EventData');\nspine.Event = require('./Event');\nspine.EventTimeline = require('./EventTimeline');\nspine.FfdTimeline = require('./FfdTimeline');\nspine.FlipXTimeline = require('./FlipXTimeline');\nspine.FlipYTimeline = require('./FlipYTimeline');\nspine.IkConstraintData = require('./IkConstraintData');\nspine.IkConstraint = require('./IkConstraint');\nspine.IkConstraintTimeline = require('./IkConstraintTimeline');\nspine.MeshAttachment = require('./MeshAttachment');\nspine.RegionAttachment = require('./RegionAttachment');\nspine.RotateTimeline = require('./RotateTimeline');\nspine.ScaleTimeline = require('./ScaleTimeline');\nspine.SkeletonBounds = require('./SkeletonBounds');\nspine.SkeletonData = require('./SkeletonData');\nspine.Skeleton = require('./Skeleton');\nspine.SkeletonJsonParser = require('./SkeletonJsonParser');\nspine.Skin = require('./Skin.js');\nspine.SkinnedMeshAttachment = require('./SkinnedMeshAttachment');\nspine.SlotData = require('./SlotData');\nspine.Slot = require('./Slot');\nspine.TrackEntry = require('./TrackEntry');\nspine.TranslateTimeline = require('./TranslateTimeline');\nmodule.exports = spine;\n","module.exports = {\n    radDeg: 180 / Math.PI,\n    degRad: Math.PI / 180,\n    temp: [],\n    Float32Array: (typeof(Float32Array) === 'undefined') ? Array : Float32Array,\n    Uint16Array: (typeof(Uint16Array) === 'undefined') ? Array : Uint16Array\n};\n\n","var spine = require('../SpineRuntime');\nvar atlasParser = require('../loaders/atlasParser');\n\n/* Esoteric Software SPINE wrapper for pixi.js */\nspine.Bone.yDown = true;\n\n/**\n * A class that enables the you to import and run your spine animations in pixi.\n * The Spine animation data needs to be loaded using either the Loader or a SpineLoader before it can be used by this class\n * See example 12 (http://www.goodboydigital.com/pixijs/examples/12/) to see a working example and check out the source\n *\n * ```js\n * var spineAnimation = new PIXI.Spine(spineData);\n * ```\n *\n * @class\n * @extends Container\n * @memberof PIXI.spine\n * @param spineData {object} The spine data loaded from a spine atlas.\n */\nfunction Spine(spineData)\n{\n    PIXI.Container.call(this);\n\n    if (!spineData)\n    {\n        throw new Error('The spineData param is required.');\n    }\n\n    if ((typeof spineData) === \"string\")\n    {\n        throw new Error('spineData param cant be string. Please use PIXI.spine.Spine.fromAtlas(\"YOUR_RESOURCE_NAME\") from now on.');\n    }\n\n    /**\n     * The spineData object\n     *\n     * @member {object}\n     */\n    this.spineData = spineData;\n\n    /**\n     * A spine Skeleton object\n     *\n     * @member {object}\n     */\n    this.skeleton = new spine.Skeleton(spineData);\n    this.skeleton.updateWorldTransform();\n\n    /**\n     * A spine AnimationStateData object created from the spine data passed in the constructor\n     *\n     * @member {object}\n     */\n    this.stateData = new spine.AnimationStateData(spineData);\n\n    /**\n     * A spine AnimationState object created from the spine AnimationStateData object\n     *\n     * @member {object}\n     */\n    this.state = new spine.AnimationState(this.stateData);\n\n    /**\n     * An array of containers\n     *\n     * @member {Container[]}\n     */\n    this.slotContainers = [];\n\n    for (var i = 0, n = this.skeleton.slots.length; i < n; i++)\n    {\n        var slot = this.skeleton.slots[i];\n        var attachment = slot.attachment;\n        var slotContainer = new PIXI.Container();\n        this.slotContainers.push(slotContainer);\n        this.addChild(slotContainer);\n\n        if (attachment instanceof spine.RegionAttachment)\n        {\n            var spriteName = attachment.rendererObject.name;\n            var sprite = this.createSprite(slot, attachment);\n            slot.currentSprite = sprite;\n            slot.currentSpriteName = spriteName;\n            slotContainer.addChild(sprite);\n        }\n        else if (attachment instanceof spine.MeshAttachment)\n        {\n            var mesh = this.createMesh(slot, attachment);\n            slot.currentMesh = mesh;\n            slot.currentMeshName = attachment.name;\n            slotContainer.addChild(mesh);\n        }\n        else\n        {\n            continue;\n        }\n\n    }\n\n    /**\n     * Should the Spine object update its transforms\n     *\n     * @member {boolean}\n     */\n    this.autoUpdate = true;\n}\n\nSpine.fromAtlas = function(resourceName) {\n    var skeletonData = atlasParser.AnimCache[resourceName];\n\n    if (!skeletonData)\n    {\n        throw new Error('Spine data \"' + resourceName + '\" does not exist in the animation cache');\n    }\n\n    return new Spine(skeletonData);\n}\n\nSpine.prototype = Object.create(PIXI.Container.prototype);\nSpine.prototype.constructor = Spine;\nmodule.exports = Spine;\n\nObject.defineProperties(Spine.prototype, {\n    /**\n     * If this flag is set to true, the spine animation will be autoupdated every time\n     * the object id drawn. The down side of this approach is that the delta time is\n     * automatically calculated and you could miss out on cool effects like slow motion,\n     * pause, skip ahead and the sorts. Most of these effects can be achieved even with\n     * autoupdate enabled but are harder to achieve.\n     *\n     * @member {boolean}\n     * @memberof Spine#\n     * @default true\n     */\n    autoUpdate: {\n        get: function ()\n        {\n            return (this.updateTransform === Spine.prototype.autoUpdateTransform);\n        },\n\n        set: function (value)\n        {\n            this.updateTransform = value ? Spine.prototype.autoUpdateTransform : PIXI.Container.prototype.updateTransform;\n        }\n    }\n});\n\n/**\n * Update the spine skeleton and its animations by delta time (dt)\n *\n * @param dt {number} Delta time. Time by which the animation should be updated\n */\nSpine.prototype.update = function (dt)\n{\n    this.state.update(dt);\n    this.state.apply(this.skeleton);\n    this.skeleton.updateWorldTransform();\n\n    var drawOrder = this.skeleton.drawOrder;\n    var slots = this.skeleton.slots;\n\n    for (var i = 0, n = drawOrder.length; i < n; i++)\n    {\n        this.children[i] = this.slotContainers[drawOrder[i]];\n    }\n\n    for (i = 0, n = slots.length; i < n; i++)\n    {\n        var slot = slots[i];\n        var attachment = slot.attachment;\n        var slotContainer = this.slotContainers[i];\n\n        if (!attachment)\n        {\n            slotContainer.visible = false;\n            continue;\n        }\n\n        var type = attachment.type;\n        if (type === spine.AttachmentType.region)\n        {\n            if (attachment.rendererObject)\n            {\n                if (!slot.currentSpriteName || slot.currentSpriteName !== attachment.rendererObject.name)\n                {\n                    var spriteName = attachment.rendererObject.name;\n                    if (slot.currentSprite !== undefined)\n                    {\n                        slot.currentSprite.visible = false;\n                    }\n                    slot.sprites = slot.sprites || {};\n                    if (slot.sprites[spriteName] !== undefined)\n                    {\n                        slot.sprites[spriteName].visible = true;\n                    }\n                    else\n                    {\n                        var sprite = this.createSprite(slot, attachment);\n                        slotContainer.addChild(sprite);\n                    }\n                    slot.currentSprite = slot.sprites[spriteName];\n                    slot.currentSpriteName = spriteName;\n                }\n            }\n\n            var bone = slot.bone;\n\n            slotContainer.position.x = bone.worldX + attachment.x * bone.m00 + attachment.y * bone.m01;\n            slotContainer.position.y = bone.worldY + attachment.x * bone.m10 + attachment.y * bone.m11;\n            slotContainer.scale.x = bone.worldScaleX;\n            slotContainer.scale.y = bone.worldScaleY;\n\n            slotContainer.rotation = -(slot.bone.worldRotation * spine.degRad);\n            slot.currentSprite.blendMode = slot.blendMode;\n            slot.currentSprite.tint = PIXI.utils.rgb2hex([slot.r,slot.g,slot.b]);\n        }\n        else if (type === spine.AttachmentType.skinnedmesh || type === spine.AttachmentType.mesh)\n        {\n            if (!slot.currentMeshName || slot.currentMeshName !== attachment.name)\n            {\n                var meshName = attachment.name;\n                if (slot.currentMesh !== undefined)\n                {\n                    slot.currentMesh.visible = false;\n                }\n\n                slot.meshes = slot.meshes || {};\n\n                if (slot.meshes[meshName] !== undefined)\n                {\n                    slot.meshes[meshName].visible = true;\n                }\n                else\n                {\n                    var mesh = this.createMesh(slot, attachment);\n                    slotContainer.addChild(mesh);\n                }\n\n                slot.currentMesh = slot.meshes[meshName];\n                slot.currentMeshName = meshName;\n            }\n\n            attachment.computeWorldVertices(slot.bone.skeleton.x, slot.bone.skeleton.y, slot, slot.currentMesh.vertices);\n\n        }\n        else\n        {\n            slotContainer.visible = false;\n            continue;\n        }\n        slotContainer.visible = true;\n\n        slotContainer.alpha = slot.a;\n    }\n};\n\n/**\n * When autoupdate is set to yes this function is used as pixi's updateTransform function\n *\n * @private\n */\nSpine.prototype.autoUpdateTransform = function ()\n{\n    this.lastTime = this.lastTime || Date.now();\n    var timeDelta = (Date.now() - this.lastTime) * 0.001;\n    this.lastTime = Date.now();\n\n    this.update(timeDelta);\n\n    PIXI.Container.prototype.updateTransform.call(this);\n};\n\n/**\n * Create a new sprite to be used with spine.RegionAttachment\n *\n * @param slot {spine.Slot} The slot to which the attachment is parented\n * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\n * @private\n */\nSpine.prototype.createSprite = function (slot, attachment)\n{\n    var descriptor = attachment.rendererObject;\n    var baseTexture = descriptor.page.rendererObject;\n    var spriteRect = new PIXI.math.Rectangle(descriptor.x,\n                                        descriptor.y,\n                                        descriptor.rotate ? descriptor.height : descriptor.width,\n                                        descriptor.rotate ? descriptor.width : descriptor.height);\n    var spriteTexture = new PIXI.Texture(baseTexture, spriteRect);\n    var sprite = new PIXI.Sprite(spriteTexture);\n\n    var baseRotation = descriptor.rotate ? Math.PI * 0.5 : 0.0;\n    sprite.scale.x = descriptor.width / descriptor.originalWidth * attachment.scaleX;\n    sprite.scale.y = descriptor.height / descriptor.originalHeight * attachment.scaleY;\n    sprite.rotation = baseRotation - (attachment.rotation * spine.degRad);\n    sprite.anchor.x = sprite.anchor.y = 0.5;\n    sprite.alpha = attachment.a;\n\n    slot.sprites = slot.sprites || {};\n    slot.sprites[descriptor.name] = sprite;\n    return sprite;\n};\n\n/**\n * Creates a Strip from the spine data\n * @param slot {spine.Slot} The slot to which the attachment is parented\n * @param attachment {spine.RegionAttachment} The attachment that the sprite will represent\n * @private\n */\nSpine.prototype.createMesh = function (slot, attachment)\n{\n    var descriptor = attachment.rendererObject;\n    var baseTexture = descriptor.page.rendererObject;\n    var texture = new PIXI.Texture(baseTexture);\n\n    var strip = new PIXI.mesh.Mesh(\n        texture,\n        new Float32Array(attachment.uvs.length),\n        new Float32Array(attachment.uvs),\n        new Uint16Array(attachment.triangles),\n        PIXI.mesh.Mesh.DRAW_MODES.TRIANGLES);\n\n    strip.canvasPadding = 1.5;\n\n    strip.alpha = attachment.a;\n\n    slot.meshes = slot.meshes || {};\n    slot.meshes[attachment.name] = strip;\n\n    return strip;\n};\n","/**\n * @file        Spine resource loader\n * @author      Ivan Popelyshev <ivan.popelyshev@gmail.com>\n * @copyright   2013-2015 GoodBoyDigital\n * @license     {@link https://github.com/GoodBoyDigital/pixi.js/blob/master/LICENSE|MIT License}\n */\n\n/**\n * @namespace PIXI.loaders\n */\n\nvar atlasParser = require('./atlasParser');\n\nPIXI.loaders.Loader.addPixiMiddleware(atlasParser);\nPIXI.loader.use(atlasParser());\n","var Resource = PIXI.loaders.Resource,\n    async = PIXI.utils.async,\n    spine = require('../SpineRuntime');\n\nvar atlasParser = module.exports = function () {\n    return function (resource, next) {\n        // skip if no data, its not json, or it isn't atlas data\n        if (!resource.data || !resource.isJson || !resource.data.bones) {\n            return next();\n        }\n\n        /**\n         * use a bit of hackery to load the atlas file, here we assume that the .json, .atlas and .png files\n         * that correspond to the spine file are in the same base URL and that the .json and .atlas files\n         * have the same name\n         */\n        var atlasPath = resource.url.substr(0, resource.url.lastIndexOf('.')) + '.atlas';\n        var atlasOptions = {\n            crossOrigin: resource.crossOrigin,\n            xhrType: Resource.XHR_RESPONSE_TYPE.TEXT\n        };\n        var baseUrl = resource.url.substr(0, resource.url.lastIndexOf('/') + 1);\n\n\n        this.add(resource.name + '_atlas', atlasPath, atlasOptions, function (res) {\n            // create a spine atlas using the loaded text\n            var spineAtlas = new spine.Atlas(this.xhr.responseText, baseUrl, res.crossOrigin);\n\n            // spine animation\n            var spineJsonParser = new spine.SkeletonJsonParser(new spine.AtlasAttachmentParser(spineAtlas));\n            var skeletonData = spineJsonParser.readSkeletonData(resource.data);\n\n            resource.spineData = skeletonData;\n            resource.spineAtlas = spineAtlas;\n            if (atlasParser.enableCaching)\n                atlasParser.AnimCache[resource.name] = resource.spineData;\n\n            // Go through each spineAtlas.pages and wait for page.rendererObject (a baseTexture) to\n            // load. Once all loaded, then call the next function.\n            async.each(spineAtlas.pages, function (page, done) {\n                if (page.rendererObject.hasLoaded) {\n                    done();\n                }\n                else {\n                    page.rendererObject.once('loaded', done);\n                }\n            }, next);\n        });\n    };\n};\n\natlasParser.AnimCache = {};\natlasParser.enableCaching = true;\n","module.exports = {\n    atlasParser: require('./atlasParser'),\n    Loader: require('./Loader')\n};\n"]}